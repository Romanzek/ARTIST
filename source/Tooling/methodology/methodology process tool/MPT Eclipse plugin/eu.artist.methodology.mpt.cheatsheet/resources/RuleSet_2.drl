/*******************************************************************************
 * Copyright (c) 2014 Atos.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * 	Burak Karaboga (Atos) - initial API and implementation
 * 	Initially developed in the context of ARTIST EU project www.artist-project.eu
 *******************************************************************************/
package rule_api_test


import eu.artist.premigration.tft.mpt.model.MigrationGoals;
import eu.artist.premigration.tft.mpt.model.TechnicalGoals;

/*
global eu.artist.methodology.mpt.model.Result result;
global eu.artist.methodology.mpt.model.TestVariable testVariable;
global eu.artist.methodology.mpt.cheatsheet.rules.RulesVariable rulesVariable;

import eu.artist.premigration.tft.tft.model.MigrationGoals;
import eu.artist.premigration.tft.tft.model.TechnicalGoals;
*/

global eu.artist.premigration.tft.mpt.model.Result result;
global eu.artist.premigration.tft.mpt.model.TestVariable testVariable;
global eu.artist.premigration.tft.mpt.rules.RulesVariable rulesVariable;

//declare any global variables here

rule "Rule_1"

	when 
		MigrationGoals (technicalGoals.iaas.targetPlatform == "EC2")
	then 
		System.out.println("Matched Rule One"); 
		System.out.println("Include steps in EMREQ");
		
		result.setStringResult("Include steps in EMREQ");
		result.setIntegerResult(new Integer(5));
		result.setBooleanResult(true);
		
		rulesVariable.addInArray("RULE_1_RETURNS_TRUE");
		
		rulesVariable.addToHashMap("RULE_1", "EMREQ", "Annotate PIM with cloud provider requirements");

end

rule "Rule_2"

	when 
		MigrationGoals (businessGoals.bil.getRule() == "use")
	then 
		System.out.println("Matched Rule Two"); 
		System.out.println("Include steps in EMREQ and OPTAPPFEA");
		
		result.setStringResult("Include steps in EMREQ and OPTAPPFEA");
		result.setIntegerResult(new Integer(5));
		result.setBooleanResult(true);
		
		rulesVariable.addInArray("RULE_2_RETURNS_TRUE");
		
		rulesVariable.addToHashMap("RULE_2", "EMREQ", "Annotate PSM with monitoring and billing components");
		rulesVariable.addToHashMap("RULE_2", "OPTAPPFEA", "Ensure that the monitoring component is created at PSM level before proceeding to the next step");

end

rule "Rule_3"

	when 
		MigrationGoals (technicalGoals.iaas.targetPlatform == "AZURE")
	then 
		System.out.println("Matched Rule Three"); 
		System.out.println("Skip Target Environment Specification tasks.");
		
		result.setStringResult("Skip Target Environment Specification tasks.");
		result.setIntegerResult(new Integer(5));
		result.setBooleanResult(true);
		
		rulesVariable.addInArray("RULE_3_RETURNS_TRUE");
		rulesVariable.addToHashMap("RULE_3","Target Environment Specification Phase","Remove ALL tasks");

end

rule "Rule_4"

	when 
		MigrationGoals (technicalGoals.a_p.databaseScalabilityRequirements == "high_scalability")
	then 
		System.out.println("Matched Rule Four"); 
		System.out.println("Include steps in EMREQ and OPTAPPFEA");
		
		result.setStringResult("Include steps in EMREQ and OPTAPPFEA");
		result.setIntegerResult(new Integer(5));
		result.setBooleanResult(true);
		
		rulesVariable.addInArray("RULE_4_RETURNS_TRUE");
		
		rulesVariable.addToHashMap("RULE_4", "EMREQ", "Annotate back-end component with highly scalable database requirement");
		rulesVariable.addToHashMap("RULE_4", "OPTAPPFEA", "Ensure that: (1) Data schema re-factoring and optimization targets NoSQL persistence frameworks, (2) Data dump transformation fits the data into the target NoSQL persistence frameworks, and (3) Persistence layer adaptation is based on the selected target NoSQL persistence frameworks");
		
end
