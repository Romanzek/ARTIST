/*******************************************************************************
 *  Copyright (c) 2014 Institute of Communication and Computer Systems (ICCS) - National Technical University of Athens (NTUA)
 *
 *  Licensed under the MIT license:
 *
 *  Permission is hereby granted, free of charge, to any person obtaining a copy
 *  of this software and associated documentation files (the "Software"), to deal
 *  in the Software without restriction, including without limitation the rights
 *  to use, copy, modify, merge, publish, distribute, sub-license, and/or sell
 *  copies of the Software, and to permit persons to whom the Software is
 *  furnished to do so, subject to the following conditions:
 *
 *  The above copyright notice and this permission notice shall be included in
 *  all copies or substantial portions of the Software.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 *  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 *  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 *  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 *  LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 *  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 *  THE SOFTWARE.
 *
 * Contributors: Kleopatra Konstanteli
 * 				 Liagouras Georgios Andreas
 *******************************************************************************/
package rule_api_test

import eu.artist.methodology.mpt.model.MigrationGoals;
import eu.artist.methodology.mpt.model.TechnicalGoals;
import eu.artist.methodology.mpt.model.AnswerList;
import eu.artist.methodology.mpt.model.Answers;
import java.util.ArrayList; 

global eu.artist.methodology.mpt.model.Result result;
global eu.artist.methodology.mpt.model.TestVariable testVariable;
global eu.artist.methodology.mpt.webapp.mat.RulesVariable rulesVariable;
//declare any global variables here

rule "Rule_1"

	when 
		MigrationGoals (technicalGoals.a_p.databaseScalabilityRequirements == "high_scalability" && technicalGoals.iaas.targetPlatform == "AEC2")
	then 
		System.out.println("Matched Rule One"); 
		System.out.println("Do something with EMREQ and OPTAPPFEA");
		
		result.setStringResult("Do something with EMREQ and OPTAPPFEA");
		result.setIntegerResult(new Integer(5));
		result.setBooleanResult(true);
		
	//	rulesVariable.addInArray("RULE_1_RETURNS_TRUE");
		//testVariable.setTestString("RULE_1_RETURNS_TRUE");

end

rule "Rule_2"

	when 
		MigrationGoals (businessGoals.bil.getRule() == "use")
	then 
		System.out.println("Matched Rule Two"); 
		System.out.println("Do something with REVE, EMREQ and OPTAPPFEA");
		
		result.setStringResult("Do something with REVE, EMREQ and OPTAPPFEA");
		result.setIntegerResult(new Integer(5));
		result.setBooleanResult(true);
		
	//	rulesVariable.addInArray("RULE_2_RETURNS_TRUE");
		
		//testVariable.setTestString("RULE_2_RETURNS_TRUE");

end

rule "Rule_3"

 when 
  MigrationGoals (technicalGoals.iaas.targetPlatform != "Azure")
 then 
  System.out.println("Matched Rule Three"); 
  System.out.println("Skip Target Environment Specification tasks.");
  
  result.setStringResult("Skip Target Environment Specification tasks.");
  result.setIntegerResult(new Integer(5));
  result.setBooleanResult(true);
  
 // rulesVariable.addInArray("RULE_3_RETURNS_TRUE");
  
  //testVariable.setTestString("RULE_2_RETURNS_TRUE");

end





rule "MCRP_1 "

    
when 
  answerList : AnswerList($answers : Answers)  
  Answers(code == "CR1",answer == "NO") from $answers
 
 then 
   	System.out.println("Rule MCRP_1");
 
  System.out.println("Add all the following activities to your actual process:");
  
  	System.out.println("MCRP.A1 - Define a communication mechanism with the user.");
	System.out.println("MCRP.A2 - Define the appropriate physical and Logical structure for the communication mechanism");
	System.out.println("MCRP.A3 - Registration Communication");
	System.out.println("MCRP.A4 - Initial diagnosis");
	System.out.println("MCRP.A5 - Inform the user");
	System.out.println("MCRP.A6 - Incidence closure"); 
  
  result.setStringResult("Rule MCRP_1");
  result.setIntegerResult(new Integer(5));
  result.setBooleanResult(true);
  
 // rulesVariable.addInArray("RULE_3_RETURNS_TRUE");
  
  //testVariable.setTestString("RULE_2_RETURNS_TRUE");

end


rule "MCRP_2"

    
when 
  answerList : AnswerList($answers : Answers)  
  Answers(code == "CR1", answer != "NO") from $answers
 
 then 
    	System.out.println("Rule MCRP_2");
 
  System.out.println("Add all the following activities your actual process:"); 
System.out.println("MCRP.A2 - Define the appropriate physical and Logical structure for the communication mechanism"); 
System.out.println("MCRP.A3 - Registration Communication"); 
System.out.println("MCRP.A4 - Initial diagnosis"); 
System.out.println("MCRP.A5 - Inform the user"); 
System.out.println("MCRP.A6 - Incidence closure"); 
  
  result.setStringResult(" MCRP_2.");
  result.setIntegerResult(new Integer(5));
  result.setBooleanResult(true);
  
 // rulesVariable.addInArray("RULE_3_RETURNS_TRUE");
  
  //testVariable.setTestString("RULE_2_RETURNS_TRUE");

end


rule "MCRP_3"

    
when 
  answerList : AnswerList($answers : Answers)  
  Answers(code == "CR3",answer == "Customer satisfaction is not measured") from $answers
 
 then 
     	System.out.println("Rule MCRP_3");
 
  System.out.println("MCRP.A7 - Measure and analysis user feedback"); 
  
  result.setStringResult("Rule MCRP_3");
  result.setIntegerResult(new Integer(5));
  result.setBooleanResult(true);
  
 // rulesVariable.addInArray("RULE_3_RETURNS_TRUE");
  
  //testVariable.setTestString("RULE_2_RETURNS_TRUE");

end

rule "IMRP_1 "

    
when 
  answerList : AnswerList($answers : Answers)  
  Answers(question == "Do you have a mechanism to record and solve the incidences", answer == "NO") from $answers
 
 then 
     	System.out.println("Rule IMRP_1");
 
  System.out.println("Add all the following activities to your actual process:"); 
 System.out.println("IMRP.A1 - Incidence identification"); 
 System.out.println("IMRP.A2 - Incidence logging"); 
 System.out.println("IMRP.A3 - Incidence categorization"); 
 System.out.println("IMRP.A4 - Initial diagnosis"); 
 System.out.println("IMRP.A5 - Incidence prioritization"); 
 System.out.println("IMRP.A7 - Investigation and diagnosis"); 
 System.out.println("IMRP.A8 - Resolution and Recovery"); 
 System.out.println("IMRP.A9 - Following up the incidence"); 
  
  result.setStringResult("Rule IMRP_1");
  result.setIntegerResult(new Integer(5));
  result.setBooleanResult(true);
  
 // rulesVariable.addInArray("RULE_3_RETURNS_TRUE");
  
  //testVariable.setTestString("RULE_2_RETURNS_TRUE");

end


rule "IMRP_2 "

    
when 
  answerList : AnswerList($answers : Answers)  
    Answers(question == "Do you have a mechanism to record and solve the incidences", answer != "NO") from $answers
  Answers(question == "The  mechanism includes an escalation process",answer == "NO") from $answers
 
 then 
      	System.out.println("Rule IMRP_2");
 
  System.out.println("IMRP.A6 - Incidence escalation"); 
  
  result.setStringResult("Rule IMRP_2");
  result.setIntegerResult(new Integer(5));
  result.setBooleanResult(true);
  
 // rulesVariable.addInArray("RULE_3_RETURNS_TRUE");
  
  //testVariable.setTestString("RULE_2_RETURNS_TRUE");

end

rule "FMP_1 "

    
when 
  answerList : AnswerList($answers : Answers)  
  Answers(code == "FP1", answer == "NO") from $answers
 
 then 
      	System.out.println("Rule FMP_1");
 
  System.out.println("Add all the following activities to your actual process:"); 
 System.out.println("FMP.A1 - Define the most appropriate business model."); 
 System.out.println("FMP.A2 - Choose one or more license model"); 
 System.out.println("FMP.A3 - Determine which are the parameters to be measured"); 
 
  
  result.setStringResult("Rule FMP_1");
  result.setIntegerResult(new Integer(5));
  result.setBooleanResult(true);
  
 // rulesVariable.addInArray("RULE_3_RETURNS_TRUE");
  
  //testVariable.setTestString("RULE_2_RETURNS_TRUE");

end

rule "FMP_2 "

    
when 
  answerList : AnswerList($answers : Answers)  
  Answers(code == "FP2", answer == "NO") from $answers
 
 then 
       	System.out.println("Rule FMP_2");
 
  System.out.println("Add all the following activities to your actual process:"); 
 System.out.println("FMP.A4 - Define the pricing policy"); 
 
  
  result.setStringResult("Rule FMP_2");
  result.setIntegerResult(new Integer(5));
  result.setBooleanResult(true);
  
 // rulesVariable.addInArray("RULE_3_RETURNS_TRUE");
  
  //testVariable.setTestString("RULE_2_RETURNS_TRUE");

end


rule "FMP_3 "

    
when 
  answerList : AnswerList($answers : Answers)  
  Answers(code == "FP3" , answer == "NO" ) from $answers
  Answers(code == "FP4" , answer == "NO" ) from $answers
 
 then 
       	System.out.println("Rule FMP_3");
 
  System.out.println("Add all the following activities to your actual process:"); 
 System.out.println("FMP.A5 - Assure the billing process"); 
 
  
  result.setStringResult("Rule FMP_3");
  result.setIntegerResult(new Integer(5));
  result.setBooleanResult(true);
  
 // rulesVariable.addInArray("RULE_3_RETURNS_TRUE");
  
  //testVariable.setTestString("RULE_2_RETURNS_TRUE");

end


rule "SLAMP_1 "

    
when 
  answerList : AnswerList($answers : Answers)  
  Answers(code == "SLA1", answer == "NO") from $answers
 
 then 
       	System.out.println("Rule SLAMP_1");
 
  System.out.println("Add all the following activities to your actual process:"); 
 System.out.println("SLAMP.A1 – Determine SLA Frameworks."); 
 System.out.println("SLAMP.A2 - Determine, document and agree requirements for existing and new services"); 
 
  
  result.setStringResult("Rule SLAMP_1");
  result.setIntegerResult(new Integer(5));
  result.setBooleanResult(true);
  
 // rulesVariable.addInArray("RULE_3_RETURNS_TRUE");
  
  //testVariable.setTestString("RULE_2_RETURNS_TRUE");

end

rule "SLAMP_2 "

    
when 
  answerList : AnswerList($answers : Answers)  
  Answers(code == "SLA3", answer == "NO") from $answers
 
 then 
        	System.out.println("Rule SLAMP_2");
 
  System.out.println("Add all the following activities to your actual process:"); 
 System.out.println("SLAMP.A3 - Review underpinning agreements "); 
 
  
  result.setStringResult("Rule SLAMP_2");
  result.setIntegerResult(new Integer(5));
  result.setBooleanResult(true);
  
 // rulesVariable.addInArray("RULE_3_RETURNS_TRUE");
  
  //testVariable.setTestString("RULE_2_RETURNS_TRUE");

end

rule "SLAMP_3 "

    
when 
  answerList : AnswerList($answers : Answers)  
  Answers( code == "SLA4", answer == "NO") from $answers
 
 then 
        	System.out.println("Rule SLAMP_3");
 
  System.out.println("Add all the following activities to your actual process:"); 
 System.out.println("SLAMP.A6 - Review SLAs and underpinning agreements "); 
 
  
  result.setStringResult("Rule SLAMP_3");
  result.setIntegerResult(new Integer(5));
  result.setBooleanResult(true);
  
 // rulesVariable.addInArray("RULE_3_RETURNS_TRUE");
  
  //testVariable.setTestString("RULE_2_RETURNS_TRUE");

end


rule "SLAMP_4 "

    
when 
  answerList : AnswerList($answers : Answers)  
  Answers(code == "SLA5", (answer == "No control or review the levels of service provided") || (answer == "Service levels are monitored but not in a systematic way")) from $answers
 
 then 
        	System.out.println("Rule SLAMP_4");
 
  System.out.println("Add all the following activities to your actual process:"); 
 System.out.println("SLAMP.A4 - Monitor service performance against SLA  "); 
 
  
  result.setStringResult("Rule SLAMP_4");
  result.setIntegerResult(new Integer(5));
  result.setBooleanResult(true);
  
 // rulesVariable.addInArray("RULE_3_RETURNS_TRUE");
  
  //testVariable.setTestString("RULE_2_RETURNS_TRUE");

end


rule "SLAMP_5 "

    
when 
  answerList : AnswerList($answers : Answers)  
  Answers(code == "SLA6", answer == "There is no mechanism") from $answers
 
 then 
        	System.out.println("Rule SLAMP_5");
 
  System.out.println("Add all the following activities to your actual process:"); 
 System.out.println("SLAMP.A5- Produce service reports "); 
 
  
  result.setStringResult("Rule SLAMP_5");
  result.setIntegerResult(new Integer(5));
  result.setBooleanResult(true);
  
 // rulesVariable.addInArray("RULE_3_RETURNS_TRUE");
  
  //testVariable.setTestString("RULE_2_RETURNS_TRUE");

end



rule "CPMP_1 "

    
when 
  answerList : AnswerList($answers : Answers)  
  Answers(code == "CP1", answer == "NO") from $answers
 
 then 
        	System.out.println("Rule CPMP_1");
 
  System.out.println("Add all the following activities to your actual process:"); 
 System.out.println("CPMP.A1 - Define the main features to be fulfilled by the cloud provider."); 
  System.out.println("CPMP.A2 - Select cloud provider"); 
  System.out.println("CPMP.A3 - Establish the cloud provider agreement"); 
  System.out.println("CPMP.A4 - Monitor the fulfilment of the conditions"); 
  System.out.println("CPMP.A5 - Report and control the non-fulfilment"); 
 
  
  result.setStringResult("Rule CPMP_1");
  result.setIntegerResult(new Integer(5));
  result.setBooleanResult(true);
  
 // rulesVariable.addInArray("RULE_3_RETURNS_TRUE");
  
  //testVariable.setTestString("RULE_2_RETURNS_TRUE");

end



rule "CPMP_2 "

    
when 
  answerList : AnswerList($answers : Answers) 
   Answers(code == "CP1", answer!="NO") from $answers 
  Answers( code == "CP2", answer == "NO") from $answers
 
 then 
         	System.out.println("Rule CPMP_2");
 
  System.out.println("Add all the following activities to your actual process:"); 
 
  System.out.println("CPMP.A4 - Monitor the fulfilment of the conditions"); 
 
  
  result.setStringResult("Rule CPMP_2");
  result.setIntegerResult(new Integer(5));
  result.setBooleanResult(true);
  
 // rulesVariable.addInArray("RULE_3_RETURNS_TRUE");
  
  //testVariable.setTestString("RULE_2_RETURNS_TRUE");

end

rule "CPMP_3 "

    
when 
  answerList : AnswerList($answers : Answers)  
   Answers(code == "CP1", answer!="NO") from $answers 
  Answers( code == "CP3",  answer == "NO") from $answers
 
 then 
          	System.out.println("Rule CPMP_3");
 
  System.out.println("Add all the following activities to your actual process:"); 
 
  System.out.println("CPMP.A5 - Report and control the non-fulfilment"); 
 
  
  result.setStringResult("Rule CPMP_3");
  result.setIntegerResult(new Integer(5));
  result.setBooleanResult(true);
  
 // rulesVariable.addInArray("RULE_3_RETURNS_TRUE");
  
  //testVariable.setTestString("RULE_2_RETURNS_TRUE");

end


rule "RAP_1 "

    
when 
  answerList : AnswerList($answers : Answers)  
  Answers(code == "RA1", answer == "") from $answers
 
 then 
          	System.out.println("Rule RAP_1");
 
  System.out.println("Add all the following activities to your actual process:"); 
 
  System.out.println("RAP.A1 - Study the organisation and identify roles."); 
   System.out.println("RAP.A2 - Define the new roles."); 
   System.out.println("RAP.A3 - Modify the existing roles"); 
 
  
  result.setStringResult("Rule RAP_1");
  result.setIntegerResult(new Integer(5));
  result.setBooleanResult(true);
  
 // rulesVariable.addInArray("RULE_3_RETURNS_TRUE");
  
  //testVariable.setTestString("RULE_2_RETURNS_TRUE");

end



rule "RAP_2 "

    
when 
  answerList : AnswerList($answers : Answers)  
  Answers(code == "RA1", answer!="") from $answers
  Answers(code == "RA2", answer =="Define the new ones") from $answers
  
 
 then 
           	System.out.println("Rule RAP_2");
 
  System.out.println("Add all the following activities to your actual process:"); 
 
   System.out.println("RAP.A3 - Modify the existing roles"); 
 
  
  result.setStringResult("Rule RAP_2");
  result.setIntegerResult(new Integer(5));
  result.setBooleanResult(true);
  
 // rulesVariable.addInArray("RULE_3_RETURNS_TRUE");
  
  //testVariable.setTestString("RULE_2_RETURNS_TRUE");

end

rule "RAP_3 "

    
when 
  answerList : AnswerList($answers : Answers)  
  Answers(code == "RA3",answer == null) from $answers
 
 then 
           	System.out.println("Rule RAP_3");
 
  System.out.println("Add all the following activities to your actual process:"); 
 
   System.out.println("RAP.A4 - Train people"); 
 
  
  result.setStringResult("Rule RAP_3");
  result.setIntegerResult(new Integer(5));
  result.setBooleanResult(true);
  
 // rulesVariable.addInArray("RULE_3_RETURNS_TRUE");
  
  //testVariable.setTestString("RULE_2_RETURNS_TRUE");

end


rule "RAP_4 "

    
when 
  answerList : AnswerList($answers : Answers)  
  Answers( code == "RA2",  answer == "NO") from $answers
 
 then 
           	System.out.println("Rule RAP_4");
 
  System.out.println("Add all the following activities to your actual process:"); 
 
   System.out.println("RAP.A5 - Communicate the affected people their new activities and responsibilities"); 
    System.out.println("RAP.A6 - Communicate the entire organization the new and modified roles "); 
 
  
  result.setStringResult("Rule RAP_4");
  result.setIntegerResult(new Integer(5));
  result.setBooleanResult(true);
  
 // rulesVariable.addInArray("RULE_3_RETURNS_TRUE");
  
  //testVariable.setTestString("RULE_2_RETURNS_TRUE");

end

rule "RAP_5 "

    
when 
  answerList : AnswerList($answers : Answers)  
  Answers(code == "RA2", answer == "To the  affected people their new activities and responsibilities") from $answers
 
 then 
           	System.out.println("Rule RAP_5");
 
  System.out.println("Add all the following activities to your actual process:"); 
 
    System.out.println("RAP.A6 - Communicate the entire organization the new and modified roles "); 
 
  
  result.setStringResult("Rule RAP_5");
  result.setIntegerResult(new Integer(5));
  result.setBooleanResult(true);
  
 // rulesVariable.addInArray("RULE_3_RETURNS_TRUE");
  
  //testVariable.setTestString("RULE_2_RETURNS_TRUE");

end


rule "DP_1"

    
when 
  answerList : AnswerList($answers : Answers)  
  Answers( code == "DP1", answer == "NO") from $answers
 
 then 
           	System.out.println("Rule DP_1");
 
  System.out.println("Add all the following activities to your actual process:"); 
 
  System.out.println("DP.A1 - Requirements elicitation. "); 
   System.out.println("DP.A2 - Select the requirements to be developed in the sprint. "); 
   System.out.println("DP.A3 - Analysis and modelling "); 
   System.out.println("DP.A4 - Development"); 
   System.out.println("DP.A5 - Testing of functional and non-functional requirements"); 
   System.out.println("DP.A6 - Review and add the requirements "); 
   System.out.println("DP.A7 - Test and deploy the final application "); 
 
  
  result.setStringResult("Rule DP_1");
  result.setIntegerResult(new Integer(5));
  result.setBooleanResult(true);
  
 // rulesVariable.addInArray("RULE_3_RETURNS_TRUE");
  
  //testVariable.setTestString("RULE_2_RETURNS_TRUE");

end

rule "DP_2"

    
when 
  answerList : AnswerList($answers : Answers)
  Answers(code == "DP1", answer!="NO") from $answers
  Answers(code == "DP2", answer == "NO") from $answers
 
 then 
            	System.out.println("Rule DP_2");
 
  System.out.println("Add all the following activities to your actual process:"); 
 
   System.out.println("DP.A2 - Select the requirements to be developed in the sprint. "); 
   System.out.println("DP.A3 - Analysis and modelling "); 
   System.out.println("DP.A4 - Development"); 
   System.out.println("DP.A5 - Testing of functional and non-functional requirements"); 
   
 
  
  result.setStringResult("Rule DP_2");
  result.setIntegerResult(new Integer(5));
  result.setBooleanResult(true);
  
 // rulesVariable.addInArray("RULE_3_RETURNS_TRUE");
  
  //testVariable.setTestString("RULE_2_RETURNS_TRUE");

end


rule "UMP"

    
when 
  answerList : AnswerList($answers : Answers)  
  Answers(answer == "NO", (( code == "DP4") || ( code == "DP6"))) from $answers
 
 then 
            	System.out.println("Rule UMP");
 
  System.out.println("Add all the following activities to your actual process:"); 
 
   System.out.println("UMP.A1 - Planning the releases. "); 
   System.out.println("UMP.A2 - Build and test the release "); 
   System.out.println("UMP.A3 - Release testing and pilot"); 
   System.out.println("UMP.A4 - Perform transfer, deployment and retirement"); 
   System.out.println("UMP.A5 - Verify, review and close deployment"); 
   
 
  
  result.setStringResult("Rule UMP");
  result.setIntegerResult(new Integer(5));
  result.setBooleanResult(true);
  
 // rulesVariable.addInArray("RULE_3_RETURNS_TRUE");
  
  //testVariable.setTestString("RULE_2_RETURNS_TRUE");

end


rule "MP"

    
when 
  answerList : AnswerList($answers : Answers)  
  Answers( answer != "channels to market, sales targets", code == "BS2" ) from $answers
 
 then 
             	System.out.println("Rule MP");
 
  System.out.println("Add all the following activities to your actual process:"); 
 
   System.out.println("MP.A1 - Analysis the market for the migrated solution. "); 
   System.out.println("MP.A2 - Identify the Marketing objectives "); 
   System.out.println("MP.A3 - Identify the marketing strategy"); 
   System.out.println("MP.A4 - Start implementing the market strategy"); 
   System.out.println("MP.A5 - Monitor the market plan"); 
      System.out.println("MP.A6 - Monitor the market"); 
   
 
  
  result.setStringResult("Rule MP");
  result.setIntegerResult(new Integer(5));
  result.setBooleanResult(true);
  
 // rulesVariable.addInArray("RULE_3_RETURNS_TRUE");
  
  //testVariable.setTestString("RULE_2_RETURNS_TRUE");

end

