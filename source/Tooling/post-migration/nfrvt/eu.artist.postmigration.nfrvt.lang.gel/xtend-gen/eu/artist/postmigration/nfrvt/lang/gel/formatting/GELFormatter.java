/**
 * generated by Xtext
 */
package eu.artist.postmigration.nfrvt.lang.gel.formatting;

import com.google.inject.Inject;
import eu.artist.postmigration.nfrvt.lang.common.formatting.ARTISTDeclarativeFormatter;
import eu.artist.postmigration.nfrvt.lang.gel.services.GELGrammarAccess;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.formatting.impl.FormattingConfig;

/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#formatting
 * on how and when to use it
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
@SuppressWarnings("all")
public class GELFormatter extends ARTISTDeclarativeFormatter {
  @Inject
  private GELGrammarAccess grammarAccess;
  
  protected void configureFormatting(final FormattingConfig c) {
    this.configureCommaStyle(c, ",");
    this.configureParenthesisStyle(c, "(", ")");
    this.configureParenthesisStyle(c, "{", "}");
    this.configureParenthesisStyle(c, "[", "]");
    TerminalRule _sL_COMMENTRule = this.grammarAccess.getSL_COMMENTRule();
    TerminalRule _mL_COMMENTRule = this.grammarAccess.getML_COMMENTRule();
    this.preserveNewLinesAroundComments(c, _sL_COMMENTRule, _mL_COMMENTRule);
    this.preserveVariableNames(c, "$");
    ParserRule _importNamespaceRule = this.grammarAccess.getImportNamespaceRule();
    this.formatImports(c, _importNamespaceRule);
    ParserRule _importURIRule = this.grammarAccess.getImportURIRule();
    this.formatImports(c, _importURIRule);
    ParserRule _importURIorNamespaceRule = this.grammarAccess.getImportURIorNamespaceRule();
    this.formatImports(c, _importURIorNamespaceRule);
  }
}
