/*******************************************************************************
 * Copyright (c) 2014 Vienna University of Technology.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * Martin Fleck (Vienna University of Technology) - initial API and implementation
 *
 * Initially developed in the context of ARTIST EU project www.artist-project.eu
 *******************************************************************************/
/*
* generated by Xtext
*/
package eu.artist.postmigration.nfrvt.lang.gel.ui.labeling;

import com.google.inject.Inject;

import eu.artist.postmigration.nfrvt.lang.common.artistCommon.Expression;
import eu.artist.postmigration.nfrvt.lang.common.artistCommon.ImportNamespace;
import eu.artist.postmigration.nfrvt.lang.common.artistCommon.ImportURI;
import eu.artist.postmigration.nfrvt.lang.common.artistCommon.ImportURIorNamespace;
import eu.artist.postmigration.nfrvt.lang.common.artistCommon.ValueSpecification;
import eu.artist.postmigration.nfrvt.lang.gel.gel.AppliedPropertyEvaluation;
import eu.artist.postmigration.nfrvt.lang.gel.gel.BooleanExpressionEvaluation;
import eu.artist.postmigration.nfrvt.lang.gel.gel.CompositeGoalEvaluation;
import eu.artist.postmigration.nfrvt.lang.gel.gel.GoalModelEvaluation;
import eu.artist.postmigration.nfrvt.lang.gel.gel.HardGoalEvaluation;
import eu.artist.postmigration.nfrvt.lang.gel.gel.MigrationEvaluation;
import eu.artist.postmigration.nfrvt.lang.gel.gel.NumberExpressionEvaluation;
import eu.artist.postmigration.nfrvt.lang.gel.gel.QuantitativePropertyRealization;
import eu.artist.postmigration.nfrvt.lang.gel.gel.SoftGoalEvaluation;
import eu.artist.postmigration.nfrvt.lang.gel.gel.Transformation;
import eu.artist.postmigration.nfrvt.lang.gel.gel.ValueExpressionEvaluation;
import eu.artist.postmigration.nfrvt.lang.gel.gel.ValueSpecificationExpressionEvaluation;
import eu.artist.postmigration.nfrvt.lang.gel.gel.Verdict;
import eu.artist.postmigration.nfrvt.lang.gel.validation.GELLabelRenderer;

/**
 * Provides labels for a EObjects.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#labelProvider
 */
public class GELLabelProvider extends org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider {

	private GELLabelRenderer renderer = new GELLabelRenderer();
	
	@Inject
	public GELLabelProvider(org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

	String text(Transformation transformation) {
		return renderer.render(transformation);
	}
	
	String text(GoalModelEvaluation goalModelEvaluation) {
		return renderer.render(goalModelEvaluation);
	}
	
	String text(Verdict verdict) {
		return renderer.render(verdict);
	}
	
	String text(SoftGoalEvaluation evaluation) {
		return renderer.render(evaluation);
	}
	
	String text(HardGoalEvaluation evaluation) {
		return renderer.render(evaluation);
	}
	
	String text(CompositeGoalEvaluation evaluation) {
		return renderer.render(evaluation);
	}

	String text(AppliedPropertyEvaluation evaluation) {
		return renderer.render(evaluation);
	}
	
	String text(ValueExpressionEvaluation evaluation) {
		return renderer.render(evaluation);
	}
	
	String text(ValueSpecificationExpressionEvaluation evaluation) {
		return renderer.render(evaluation);
	}
	
	String text(BooleanExpressionEvaluation evaluation) {
		return renderer.render(evaluation);
	}
	
	String text(NumberExpressionEvaluation evaluation) {
		return renderer.render(evaluation);
	}
	
	String text(ValueSpecification vs) {
		return renderer.render(vs);
	}
	
	String text(QuantitativePropertyRealization val) {
		return renderer.render(val);
	}
	
	String text(MigrationEvaluation evaluation) {
		return renderer.render(evaluation);
	}
	
	String text(Expression expression) {
		return renderer.render(expression);
	}
	
	String text(ImportNamespace importNamespace) {
		return renderer.render(importNamespace);
	}
	
	String text(ImportURI importURI) {
		return renderer.render(importURI);
	}
	
	String text(ImportURIorNamespace i) {
		return renderer.render(i);
	}
}
