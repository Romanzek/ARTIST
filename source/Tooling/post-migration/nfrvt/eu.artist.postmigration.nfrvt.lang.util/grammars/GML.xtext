// automatically generated by Xtext
grammar eu.artist.postmigration.gml.editor.textual.GML with org.eclipse.xtext.xbase.Xbase

import "http://www.artist-project.eu/gml" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/uml2/4.0.0/UML" as uml

GoalModel returns GoalModel:
	{GoalModel}
	'GoalModel'
	name=EString
	'{'
		('goals' '{' goals+=Goal ( "," goals+=Goal)* '}' )?
		('changes' '{' changes+=Change ( "," changes+=Change)* '}' )?
		('relations' '{' relations+=GoalRelation ( "," relations+=GoalRelation)* '}' )?
		('variables' '{' variables+=Variable ( "," variables+=Variable)* '}' )?
		('evaluations' '{' evaluations+=GoalModelEvaluation ( "," evaluations+=GoalModelEvaluation)* '}' )?
	'}';

Goal returns Goal:
	HardGoal | SoftGoal;

SoftGoal returns SoftGoal:
	'SoftGoal'
	name=EString
	'('
		'priority' priority=EBigInteger
		('category' category=GoalCategory)?
//		('subGoalOf' '(' subGoalOf+=[GoalDecomposition|EString] ( "," subGoalOf+=[GoalDecomposition|EString])* ')' )?
//		('influencedByChanges' '(' influencedByChanges+=[ChangeInfluence|EString] ( "," influencedByChanges+=[ChangeInfluence|EString])* ')' )?
//		('influencedByGoals' '(' influencedByGoals+=[GoalInfluence|EString] ( "," influencedByGoals+=[GoalInfluence|EString])* ')' )?
//		('influencesGoals' '(' influencesGoals+=[GoalInfluence|EString] ( "," influencesGoals+=[GoalInfluence|EString])* ')' )?
//		('superGoalOf' superGoalOf=[GoalDecomposition|EString])?
//		('evaluations' '(' evaluations+=[SoftGoalEvaluation|EString] ( "," evaluations+=[SoftGoalEvaluation|EString])* ')' )?
	')';

HardGoal returns HardGoal:
	'HardGoal'
	name=EString
	'('
		'priority' priority=EBigInteger
		('category' category=GoalCategory)?
//		('subGoalOf' '(' subGoalOf+=[GoalDecomposition|EString] ( "," subGoalOf+=[GoalDecomposition|EString])* ')' )?
//		('influencedByChanges' '(' influencedByChanges+=[ChangeInfluence|EString] ( "," influencedByChanges+=[ChangeInfluence|EString])* ')' )?
//		('influencedByGoals' '(' influencedByGoals+=[GoalInfluence|EString] ( "," influencedByGoals+=[GoalInfluence|EString])* ')' )?
//		('influencesGoals' '(' influencesGoals+=[GoalInfluence|EString] ( "," influencesGoals+=[GoalInfluence|EString])* ')' )?
//		('evaluations' '(' evaluations+=[HardGoalEvaluation|EString] ( "," evaluations+=[HardGoalEvaluation|EString])* ')' )?
		'condition' condition=GoalCondition
	')';

enum GoalCategory returns GoalCategory:
	SECURITY = 'SECURITY' | 
	PERFORMANCE = 'PERFORMANCE' | 
	RELIABILITY = 'RELIABILITY' | 
	USABILITY = 'USABILITY' | 
	FUNCTIONALITY = 'FUNCTIONALITY' | 
	SCALABILITY = 'SCALABILITY' | 
	PRICING = 'PRICING';


GoalCondition returns GoalCondition:
	BooleanCondition | CompositeCondition;

BooleanCondition returns BooleanCondition:
		LHSExpression=Expression
		operator=ComparisonOperator
		RHSExpression=Expression;

CompositeCondition returns CompositeCondition:
	'(' 
		LHSCondition=GoalCondition
		operator=LogicalOperator
		RHSCondition=GoalCondition 
	')';

Expression returns Expression:
	ArithmeticExpression | VariableExpression | ConstantExpression;

ArithmeticExpression returns ArithmeticExpression:
	'['
		LHSExpression=Expression
		operator=ArithmeticOperator
		RHSExpression=Expression
	']';

VariableExpression returns VariableExpression:
	'variable:' variable=[Variable|EString]
		('(' context+=[uml::NamedElement|QualifiedName] ( "," context+=[uml::NamedElement|QualifiedName])* ')' )?;


ConstantExpression returns ConstantExpression:
	value=InstanceSpecification;
	
enum ComparisonOperator returns ComparisonOperator:
				LESS = '<' | LESS_OR_EQUAL = '<=' | EQUAL = '==' | NOT_EQUAL = '!=' | GREATER = '>' | GREATER_OR_EQUAL = '>=';

enum ArithmeticOperator returns ArithmeticOperator:
				ADD = '+' | SUBSTRACT = '-' | DIVIDE = '/' | MULTIPLY = '*';

enum LogicalOperator returns LogicalOperator:
				AND = 'AND' | OR = 'OR' | XOR = 'XOR';
	
enum Verdict returns Verdict:
				PASS = 'PASS' | FAIL = 'FAIL' | INCONCLUSIVE = 'INCONCLUSIVE';
	
InstanceSpecification returns uml::InstanceSpecification:
	{uml::InstanceSpecification}
		('{' 
			('name=' name=STRING)?
			('classifier=' '(' classifier+=[uml::Classifier|QualifiedName] ( "," classifier+=[uml::Classifier|QualifiedName])* ')' )?
		'}')?
		(specification=ValueSpecification);

ValueSpecification returns uml::ValueSpecification:
	(InstanceValue | LiteralBoolean | LiteralInteger | LiteralNull | LiteralReal | LiteralString | LiteralUnlimitedNatural)
	('{' 
		('name=' name=STRING)?
		('type=' type=[uml::Type|EString])?
	'}')?;

InstanceValue returns uml::InstanceValue:
	'instance:'
	instance=[uml::InstanceSpecification|EString];
   
LiteralBoolean returns uml::LiteralBoolean:
	{uml::LiteralBoolean}
	'boolean:'
	((value?='true') | 'false');

LiteralInteger returns uml::LiteralInteger:
	'integer:'
	value=INT;
		

LiteralNull returns uml::LiteralNull:
	{uml::LiteralNull}
	'null';

LiteralReal returns uml::LiteralReal:
	'real:'
	value=EDouble;
		
		
LiteralString returns uml::LiteralString:
	{uml::LiteralString}
	'string:'
	value=STRING;
		

LiteralUnlimitedNatural returns uml::LiteralUnlimitedNatural:
	'unlimited' value=INT;
	
GoalRelation returns GoalRelation:
	GoalInfluence | GoalDecomposition | ChangeInfluence;

GoalDecomposition returns GoalDecomposition:
	'decomposition' 
	superGoal=[SoftGoal|EString] 
	operator=LogicalOperator
	('{' subGoals+=[Goal|EString] ( "," subGoals+=[Goal|EString])* '}' )+;

ChangeInfluence returns ChangeInfluence:
	'changeInfluence'
	change=[Change|EString]
	influence=EBigDecimal
	goal=[Goal|EString];

GoalInfluence returns GoalInfluence:
	'goalInfluence'
	source=[Goal|EString]
	influence=EBigDecimal
	target=[Goal|EString];

Change returns Change:
	{Change}
//	'Change'
	name=EString;
//	'{'
//		('changeInfluences' '(' changeInfluences+=[ChangeInfluence|EString] ( "," changeInfluences+=[ChangeInfluence|EString])* ')' )?
//	'}';

Variable returns Variable:
//	'Variable'
	name=EString
//	'{'
//		('values' '(' values+=[VariableValue|EString] ( "," values+=[VariableValue|EString])* ')' )?
		':' type=[uml::DataType|QualifiedName];
//		('variableExpressions' '(' variableExpressions+=[VariableExpression|EString] ( "," variableExpressions+=[VariableExpression|EString])* ')' )?
//	'}';

GoalModelEvaluation returns GoalModelEvaluation:
	'modelEvaluation'
	name=EString
	'{'
		'verdict' verdict=Verdict
		'reason' reason=EString
		('goalEvaluations' '{' goalEvaluations+=GoalEvaluation ( "," goalEvaluations+=GoalEvaluation)* '}' )?
		('variableValues' '{' variableValues+=VariableValue ( "," variableValues+=VariableValue)* '}' )?
	'}';
	
GoalEvaluation returns GoalEvaluation:
	HardGoalEvaluation | SoftGoalEvaluation;

GoalConditionEvaluation returns GoalConditionEvaluation:
	BooleanConditionEvaluation | CompositeConditionEvaluation;

HardGoalEvaluation returns HardGoalEvaluation:
	goal=[HardGoal|EString]
	':' verdict=Verdict
	':' reason=EString
	'(' conditionEvaluation=GoalConditionEvaluation ')'
	'}';

BooleanConditionEvaluation returns BooleanConditionEvaluation:
	'BooleanConditionEvaluation'
	'{'
		'verdict' verdict=Verdict
		'reason' reason=EString
		'condition' condition=[BooleanCondition|EString]
	'}';

CompositeConditionEvaluation returns CompositeConditionEvaluation:
	'CompositeConditionEvaluation'
	'{'
		'verdict' verdict=Verdict
		'reason' reason=EString
		'condition' condition=[CompositeCondition|EString]
		'LHSConditionEvaluation' LHSConditionEvaluation=GoalConditionEvaluation
		'RHSConditionEvaluation' RHSConditionEvaluation=GoalConditionEvaluation
	'}';

SoftGoalEvaluation returns SoftGoalEvaluation:
	'SoftGoalEvaluation'
	'{'
		'verdict' verdict=Verdict
		'reason' reason=EString
		'goal' goal=[SoftGoal|EString]
	'}';

VariableValue returns VariableValue:
	variable=[Variable|EString]
	('context' '(' context+=[uml::NamedElement|QualifiedName] ( "," context+=[uml::NamedElement|QualifiedName])* ')' )?
	':' value=InstanceSpecification;

								
EString returns ecore::EString:
	STRING | ID;
	
EBigInteger returns ecore::EBigInteger:
	'-'? INT;

EBigDecimal returns ecore::EBigDecimal:
	INT? '.' INT;

EDouble returns ecore::EDouble:
	(INT | DECIMAL) ('.' (INT | DECIMAL))?
;