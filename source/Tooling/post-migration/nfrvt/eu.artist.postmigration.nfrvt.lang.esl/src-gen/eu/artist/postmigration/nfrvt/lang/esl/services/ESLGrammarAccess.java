/*
* generated by Xtext
*/
package eu.artist.postmigration.nfrvt.lang.esl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import eu.artist.postmigration.nfrvt.lang.common.services.ARTISTCommonGrammarAccess;

@Singleton
public class ESLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class EvaluationStrategyCatalogueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EvaluationStrategyCatalogue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportNamespaceParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Keyword cStrategyCatalogueKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameQualifiedNameParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cStrategiesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cStrategiesEvaluationStrategyParserRuleCall_4_0 = (RuleCall)cStrategiesAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//EvaluationStrategyCatalogue:
		//	imports+=ImportNamespace* "strategy-catalogue" name=QualifiedName "{" strategies+=EvaluationStrategy* "}";
		public ParserRule getRule() { return rule; }

		//imports+=ImportNamespace* "strategy-catalogue" name=QualifiedName "{" strategies+=EvaluationStrategy* "}"
		public Group getGroup() { return cGroup; }

		//imports+=ImportNamespace*
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }

		//ImportNamespace
		public RuleCall getImportsImportNamespaceParserRuleCall_0_0() { return cImportsImportNamespaceParserRuleCall_0_0; }

		//"strategy-catalogue"
		public Keyword getStrategyCatalogueKeyword_1() { return cStrategyCatalogueKeyword_1; }

		//name=QualifiedName
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_2_0() { return cNameQualifiedNameParserRuleCall_2_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }

		//strategies+=EvaluationStrategy*
		public Assignment getStrategiesAssignment_4() { return cStrategiesAssignment_4; }

		//EvaluationStrategy
		public RuleCall getStrategiesEvaluationStrategyParserRuleCall_4_0() { return cStrategiesEvaluationStrategyParserRuleCall_4_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}

	public class EvaluationStrategyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EvaluationStrategy");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStrategyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cJavaClassKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cJavaClassAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final CrossReference cJavaClassJvmDeclaredTypeCrossReference_3_1_0 = (CrossReference)cJavaClassAssignment_3_1.eContents().get(0);
		private final RuleCall cJavaClassJvmDeclaredTypeQualifiedNameParserRuleCall_3_1_0_1 = (RuleCall)cJavaClassJvmDeclaredTypeCrossReference_3_1_0.eContents().get(1);
		private final Keyword cCommaKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Keyword cDescriptionKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cDescriptionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDescriptionSTRINGTerminalRuleCall_5_0 = (RuleCall)cDescriptionAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCommaKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLevelKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cLevelAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cLevelEvaluationStrategyLevelKindEnumRuleCall_6_2_0 = (RuleCall)cLevelAssignment_6_2.eContents().get(0);
		private final Keyword cCommaKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cEvaluatesKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cLeftSquareBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cPropertiesAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final CrossReference cPropertiesQuantitativePropertyCrossReference_10_0 = (CrossReference)cPropertiesAssignment_10.eContents().get(0);
		private final RuleCall cPropertiesQuantitativePropertyQualifiedNameParserRuleCall_10_0_1 = (RuleCall)cPropertiesQuantitativePropertyCrossReference_10_0.eContents().get(1);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cCommaKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cPropertiesAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final CrossReference cPropertiesQuantitativePropertyCrossReference_11_1_0 = (CrossReference)cPropertiesAssignment_11_1.eContents().get(0);
		private final RuleCall cPropertiesQuantitativePropertyQualifiedNameParserRuleCall_11_1_0_1 = (RuleCall)cPropertiesQuantitativePropertyCrossReference_11_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//EvaluationStrategy:
		//	"strategy" name=ID "{" ("javaClass" javaClass=[jvmTypes::JvmDeclaredType|QualifiedName] ",")? "description"
		//	description=STRING ("," "level" level=EvaluationStrategyLevelKind) "," "evaluates" "["
		//	properties+=[nsl::QuantitativeProperty|QualifiedName] ("," properties+=[nsl::QuantitativeProperty|QualifiedName])*
		//	"]" "}";
		public ParserRule getRule() { return rule; }

		//"strategy" name=ID "{" ("javaClass" javaClass=[jvmTypes::JvmDeclaredType|QualifiedName] ",")? "description"
		//description=STRING ("," "level" level=EvaluationStrategyLevelKind) "," "evaluates" "["
		//properties+=[nsl::QuantitativeProperty|QualifiedName] ("," properties+=[nsl::QuantitativeProperty|QualifiedName])* "]"
		//"}"
		public Group getGroup() { return cGroup; }

		//"strategy"
		public Keyword getStrategyKeyword_0() { return cStrategyKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//("javaClass" javaClass=[jvmTypes::JvmDeclaredType|QualifiedName] ",")?
		public Group getGroup_3() { return cGroup_3; }

		//"javaClass"
		public Keyword getJavaClassKeyword_3_0() { return cJavaClassKeyword_3_0; }

		//javaClass=[jvmTypes::JvmDeclaredType|QualifiedName]
		public Assignment getJavaClassAssignment_3_1() { return cJavaClassAssignment_3_1; }

		//[jvmTypes::JvmDeclaredType|QualifiedName]
		public CrossReference getJavaClassJvmDeclaredTypeCrossReference_3_1_0() { return cJavaClassJvmDeclaredTypeCrossReference_3_1_0; }

		//QualifiedName
		public RuleCall getJavaClassJvmDeclaredTypeQualifiedNameParserRuleCall_3_1_0_1() { return cJavaClassJvmDeclaredTypeQualifiedNameParserRuleCall_3_1_0_1; }

		//","
		public Keyword getCommaKeyword_3_2() { return cCommaKeyword_3_2; }

		//"description"
		public Keyword getDescriptionKeyword_4() { return cDescriptionKeyword_4; }

		//description=STRING
		public Assignment getDescriptionAssignment_5() { return cDescriptionAssignment_5; }

		//STRING
		public RuleCall getDescriptionSTRINGTerminalRuleCall_5_0() { return cDescriptionSTRINGTerminalRuleCall_5_0; }

		//"," "level" level=EvaluationStrategyLevelKind
		public Group getGroup_6() { return cGroup_6; }

		//","
		public Keyword getCommaKeyword_6_0() { return cCommaKeyword_6_0; }

		//"level"
		public Keyword getLevelKeyword_6_1() { return cLevelKeyword_6_1; }

		//level=EvaluationStrategyLevelKind
		public Assignment getLevelAssignment_6_2() { return cLevelAssignment_6_2; }

		//EvaluationStrategyLevelKind
		public RuleCall getLevelEvaluationStrategyLevelKindEnumRuleCall_6_2_0() { return cLevelEvaluationStrategyLevelKindEnumRuleCall_6_2_0; }

		//","
		public Keyword getCommaKeyword_7() { return cCommaKeyword_7; }

		//"evaluates"
		public Keyword getEvaluatesKeyword_8() { return cEvaluatesKeyword_8; }

		//"["
		public Keyword getLeftSquareBracketKeyword_9() { return cLeftSquareBracketKeyword_9; }

		//properties+=[nsl::QuantitativeProperty|QualifiedName]
		public Assignment getPropertiesAssignment_10() { return cPropertiesAssignment_10; }

		//[nsl::QuantitativeProperty|QualifiedName]
		public CrossReference getPropertiesQuantitativePropertyCrossReference_10_0() { return cPropertiesQuantitativePropertyCrossReference_10_0; }

		//QualifiedName
		public RuleCall getPropertiesQuantitativePropertyQualifiedNameParserRuleCall_10_0_1() { return cPropertiesQuantitativePropertyQualifiedNameParserRuleCall_10_0_1; }

		//("," properties+=[nsl::QuantitativeProperty|QualifiedName])*
		public Group getGroup_11() { return cGroup_11; }

		//","
		public Keyword getCommaKeyword_11_0() { return cCommaKeyword_11_0; }

		//properties+=[nsl::QuantitativeProperty|QualifiedName]
		public Assignment getPropertiesAssignment_11_1() { return cPropertiesAssignment_11_1; }

		//[nsl::QuantitativeProperty|QualifiedName]
		public CrossReference getPropertiesQuantitativePropertyCrossReference_11_1_0() { return cPropertiesQuantitativePropertyCrossReference_11_1_0; }

		//QualifiedName
		public RuleCall getPropertiesQuantitativePropertyQualifiedNameParserRuleCall_11_1_0_1() { return cPropertiesQuantitativePropertyQualifiedNameParserRuleCall_11_1_0_1; }

		//"]"
		public Keyword getRightSquareBracketKeyword_12() { return cRightSquareBracketKeyword_12; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
	}
	
	
	public class EvaluationStrategyLevelKindElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "EvaluationStrategyLevelKind");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMODELEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMODELModelKeyword_0_0 = (Keyword)cMODELEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCODEEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCODECodeKeyword_1_0 = (Keyword)cCODEEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum EvaluationStrategyLevelKind:
		//	MODEL="model" | CODE="code";
		public EnumRule getRule() { return rule; }

		//MODEL="model" | CODE="code"
		public Alternatives getAlternatives() { return cAlternatives; }

		//MODEL="model"
		public EnumLiteralDeclaration getMODELEnumLiteralDeclaration_0() { return cMODELEnumLiteralDeclaration_0; }

		//"model"
		public Keyword getMODELModelKeyword_0_0() { return cMODELModelKeyword_0_0; }

		//CODE="code"
		public EnumLiteralDeclaration getCODEEnumLiteralDeclaration_1() { return cCODEEnumLiteralDeclaration_1; }

		//"code"
		public Keyword getCODECodeKeyword_1_0() { return cCODECodeKeyword_1_0; }
	}
	
	private EvaluationStrategyCatalogueElements pEvaluationStrategyCatalogue;
	private EvaluationStrategyElements pEvaluationStrategy;
	private EvaluationStrategyLevelKindElements unknownRuleEvaluationStrategyLevelKind;
	
	private final Grammar grammar;

	private ARTISTCommonGrammarAccess gaARTISTCommon;

	@Inject
	public ESLGrammarAccess(GrammarProvider grammarProvider,
		ARTISTCommonGrammarAccess gaARTISTCommon) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaARTISTCommon = gaARTISTCommon;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("eu.artist.postmigration.nfrvt.lang.esl.ESL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public ARTISTCommonGrammarAccess getARTISTCommonGrammarAccess() {
		return gaARTISTCommon;
	}

	
	//EvaluationStrategyCatalogue:
	//	imports+=ImportNamespace* "strategy-catalogue" name=QualifiedName "{" strategies+=EvaluationStrategy* "}";
	public EvaluationStrategyCatalogueElements getEvaluationStrategyCatalogueAccess() {
		return (pEvaluationStrategyCatalogue != null) ? pEvaluationStrategyCatalogue : (pEvaluationStrategyCatalogue = new EvaluationStrategyCatalogueElements());
	}
	
	public ParserRule getEvaluationStrategyCatalogueRule() {
		return getEvaluationStrategyCatalogueAccess().getRule();
	}

	//EvaluationStrategy:
	//	"strategy" name=ID "{" ("javaClass" javaClass=[jvmTypes::JvmDeclaredType|QualifiedName] ",")? "description"
	//	description=STRING ("," "level" level=EvaluationStrategyLevelKind) "," "evaluates" "["
	//	properties+=[nsl::QuantitativeProperty|QualifiedName] ("," properties+=[nsl::QuantitativeProperty|QualifiedName])*
	//	"]" "}";
	public EvaluationStrategyElements getEvaluationStrategyAccess() {
		return (pEvaluationStrategy != null) ? pEvaluationStrategy : (pEvaluationStrategy = new EvaluationStrategyElements());
	}
	
	public ParserRule getEvaluationStrategyRule() {
		return getEvaluationStrategyAccess().getRule();
	}

	//enum EvaluationStrategyLevelKind:
	//	MODEL="model" | CODE="code";
	public EvaluationStrategyLevelKindElements getEvaluationStrategyLevelKindAccess() {
		return (unknownRuleEvaluationStrategyLevelKind != null) ? unknownRuleEvaluationStrategyLevelKind : (unknownRuleEvaluationStrategyLevelKind = new EvaluationStrategyLevelKindElements());
	}
	
	public EnumRule getEvaluationStrategyLevelKindRule() {
		return getEvaluationStrategyLevelKindAccess().getRule();
	}

	//Expression:
	//	Implication;
	public ARTISTCommonGrammarAccess.ExpressionElements getExpressionAccess() {
		return gaARTISTCommon.getExpressionAccess();
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//Implication:
	//	Disjunction ({Implication.left=current} operator=ImplicationOperator right=Disjunction)*;
	public ARTISTCommonGrammarAccess.ImplicationElements getImplicationAccess() {
		return gaARTISTCommon.getImplicationAccess();
	}
	
	public ParserRule getImplicationRule() {
		return getImplicationAccess().getRule();
	}

	//Disjunction:
	//	Conjunction ({Disjunction.left=current} operator=(OrOperator | XOrOperator) right=Conjunction)*;
	public ARTISTCommonGrammarAccess.DisjunctionElements getDisjunctionAccess() {
		return gaARTISTCommon.getDisjunctionAccess();
	}
	
	public ParserRule getDisjunctionRule() {
		return getDisjunctionAccess().getRule();
	}

	//Conjunction:
	//	Comparison ({Conjunction.left=current} operator=AndOperator right=Comparison)*;
	public ARTISTCommonGrammarAccess.ConjunctionElements getConjunctionAccess() {
		return gaARTISTCommon.getConjunctionAccess();
	}
	
	public ParserRule getConjunctionRule() {
		return getConjunctionAccess().getRule();
	}

	//Comparison:
	//	BooleanUnit ({Comparison.left=current} operator=(EqualsOperator | NotEqualsOperator) right=BooleanUnit)*;
	public ARTISTCommonGrammarAccess.ComparisonElements getComparisonAccess() {
		return gaARTISTCommon.getComparisonAccess();
	}
	
	public ParserRule getComparisonRule() {
		return getComparisonAccess().getRule();
	}

	//BooleanUnit:
	//	Negation | RelationalExpression | BooleanLiteral;
	public ARTISTCommonGrammarAccess.BooleanUnitElements getBooleanUnitAccess() {
		return gaARTISTCommon.getBooleanUnitAccess();
	}
	
	public ParserRule getBooleanUnitRule() {
		return getBooleanUnitAccess().getRule();
	}

	//Negation:
	//	operator=NotOperator value=BooleanUnit;
	public ARTISTCommonGrammarAccess.NegationElements getNegationAccess() {
		return gaARTISTCommon.getNegationAccess();
	}
	
	public ParserRule getNegationRule() {
		return getNegationAccess().getRule();
	}

	//RelationalExpression:
	//	ComparableExpression (({RelationalExpression.left=current} operator=GreaterThanOperator |
	//	{RelationalExpression.left=current} operator=GreaterOrEqualThanOperator | {RelationalExpression.left=current}
	//	operator=LessOrEqualThanOperator | {RelationalExpression.left=current} operator=LessThanOperator)
	//	right=ComparableExpression)*;
	public ARTISTCommonGrammarAccess.RelationalExpressionElements getRelationalExpressionAccess() {
		return gaARTISTCommon.getRelationalExpressionAccess();
	}
	
	public ParserRule getRelationalExpressionRule() {
		return getRelationalExpressionAccess().getRule();
	}

	//ComparableExpression:
	//	ArithmeticExpression | InstanceSpecificationExpression | ObjectSpecificationExpression | NullLiteral | StringLiteral
	//	| UnlimitedLiteral | ParenthesizedExpression;
	public ARTISTCommonGrammarAccess.ComparableExpressionElements getComparableExpressionAccess() {
		return gaARTISTCommon.getComparableExpressionAccess();
	}
	
	public ParserRule getComparableExpressionRule() {
		return getComparableExpressionAccess().getRule();
	}

	//ArithmeticExpression:
	//	AdditiveExpression;
	public ARTISTCommonGrammarAccess.ArithmeticExpressionElements getArithmeticExpressionAccess() {
		return gaARTISTCommon.getArithmeticExpressionAccess();
	}
	
	public ParserRule getArithmeticExpressionRule() {
		return getArithmeticExpressionAccess().getRule();
	}

	//AdditiveExpression:
	//	MultiplicativeExpression ({AdditiveExpression.left=current} operator=(SubstractionOperator | AdditionOperator)
	//	right=MultiplicativeExpression)*;
	public ARTISTCommonGrammarAccess.AdditiveExpressionElements getAdditiveExpressionAccess() {
		return gaARTISTCommon.getAdditiveExpressionAccess();
	}
	
	public ParserRule getAdditiveExpressionRule() {
		return getAdditiveExpressionAccess().getRule();
	}

	//MultiplicativeExpression:
	//	NumberExpression ({MultiplicativeExpression.left=current} operator=(MultiplicationOperator | DivisionOperator |
	//	ModulusOperator) right=NumberExpression)*;
	public ARTISTCommonGrammarAccess.MultiplicativeExpressionElements getMultiplicativeExpressionAccess() {
		return gaARTISTCommon.getMultiplicativeExpressionAccess();
	}
	
	public ParserRule getMultiplicativeExpressionRule() {
		return getMultiplicativeExpressionAccess().getRule();
	}

	//NumberExpression:
	//	NumberLiteral | NumberFunction;
	public ARTISTCommonGrammarAccess.NumberExpressionElements getNumberExpressionAccess() {
		return gaARTISTCommon.getNumberExpressionAccess();
	}
	
	public ParserRule getNumberExpressionRule() {
		return getNumberExpressionAccess().getRule();
	}

	//NumberFunction:
	//	MaximumFunction | MinimumFunction | AverageFunction | SumFunction | ExponentialFunction | AbsoluteFunction |
	//	NaturalLogarithmFunction | CommonLogarithmFunction;
	public ARTISTCommonGrammarAccess.NumberFunctionElements getNumberFunctionAccess() {
		return gaARTISTCommon.getNumberFunctionAccess();
	}
	
	public ParserRule getNumberFunctionRule() {
		return getNumberFunctionAccess().getRule();
	}

	//MaximumFunction:
	//	operator=MaxOperator "(" values+=NumberExpression ("," values+=NumberExpression)* ")";
	public ARTISTCommonGrammarAccess.MaximumFunctionElements getMaximumFunctionAccess() {
		return gaARTISTCommon.getMaximumFunctionAccess();
	}
	
	public ParserRule getMaximumFunctionRule() {
		return getMaximumFunctionAccess().getRule();
	}

	//MinimumFunction:
	//	operator=MinOperator "(" values+=NumberExpression ("," values+=NumberExpression)* ")";
	public ARTISTCommonGrammarAccess.MinimumFunctionElements getMinimumFunctionAccess() {
		return gaARTISTCommon.getMinimumFunctionAccess();
	}
	
	public ParserRule getMinimumFunctionRule() {
		return getMinimumFunctionAccess().getRule();
	}

	//AverageFunction:
	//	operator=AvgOperator "(" values+=NumberExpression ("," values+=NumberExpression)* ")";
	public ARTISTCommonGrammarAccess.AverageFunctionElements getAverageFunctionAccess() {
		return gaARTISTCommon.getAverageFunctionAccess();
	}
	
	public ParserRule getAverageFunctionRule() {
		return getAverageFunctionAccess().getRule();
	}

	//SumFunction:
	//	operator=SumOperator "(" values+=NumberExpression ("," values+=NumberExpression)* ")";
	public ARTISTCommonGrammarAccess.SumFunctionElements getSumFunctionAccess() {
		return gaARTISTCommon.getSumFunctionAccess();
	}
	
	public ParserRule getSumFunctionRule() {
		return getSumFunctionAccess().getRule();
	}

	//ExponentialFunction:
	//	operator=ExponentialOperator "(" base=NumberExpression "," exponent=NumberExpression ")";
	public ARTISTCommonGrammarAccess.ExponentialFunctionElements getExponentialFunctionAccess() {
		return gaARTISTCommon.getExponentialFunctionAccess();
	}
	
	public ParserRule getExponentialFunctionRule() {
		return getExponentialFunctionAccess().getRule();
	}

	//AbsoluteFunction:
	//	operator=AbsoluteOperator "(" value=NumberExpression ")";
	public ARTISTCommonGrammarAccess.AbsoluteFunctionElements getAbsoluteFunctionAccess() {
		return gaARTISTCommon.getAbsoluteFunctionAccess();
	}
	
	public ParserRule getAbsoluteFunctionRule() {
		return getAbsoluteFunctionAccess().getRule();
	}

	//NaturalLogarithmFunction:
	//	operator=NaturalLogarithmOperator "(" value=NumberExpression ")";
	public ARTISTCommonGrammarAccess.NaturalLogarithmFunctionElements getNaturalLogarithmFunctionAccess() {
		return gaARTISTCommon.getNaturalLogarithmFunctionAccess();
	}
	
	public ParserRule getNaturalLogarithmFunctionRule() {
		return getNaturalLogarithmFunctionAccess().getRule();
	}

	//CommonLogarithmFunction:
	//	operator=CommonLogarithmOperator "(" value=NumberExpression ")";
	public ARTISTCommonGrammarAccess.CommonLogarithmFunctionElements getCommonLogarithmFunctionAccess() {
		return gaARTISTCommon.getCommonLogarithmFunctionAccess();
	}
	
	public ParserRule getCommonLogarithmFunctionRule() {
		return getCommonLogarithmFunctionAccess().getRule();
	}

	//ParenthesizedExpression:
	//	LeftParenthesis value=Expression RightParenthesis;
	public ARTISTCommonGrammarAccess.ParenthesizedExpressionElements getParenthesizedExpressionAccess() {
		return gaARTISTCommon.getParenthesizedExpressionAccess();
	}
	
	public ParserRule getParenthesizedExpressionRule() {
		return getParenthesizedExpressionAccess().getRule();
	}

	//ValueSpecification:
	//	LiteralValueExpression | InstanceSpecificationExpression | ObjectSpecificationExpression;
	public ARTISTCommonGrammarAccess.ValueSpecificationElements getValueSpecificationAccess() {
		return gaARTISTCommon.getValueSpecificationAccess();
	}
	
	public ParserRule getValueSpecificationRule() {
		return getValueSpecificationAccess().getRule();
	}

	//ObjectSpecificationExpression:
	//	type=[uml::DataType|QualifiedName] (value=Collection | value=Tuple);
	public ARTISTCommonGrammarAccess.ObjectSpecificationExpressionElements getObjectSpecificationExpressionAccess() {
		return gaARTISTCommon.getObjectSpecificationExpressionAccess();
	}
	
	public ParserRule getObjectSpecificationExpressionRule() {
		return getObjectSpecificationExpressionAccess().getRule();
	}

	//Collection:
	//	"[" values+=ValueSpecification ("," values+=ValueSpecification)* "]";
	public ARTISTCommonGrammarAccess.CollectionElements getCollectionAccess() {
		return gaARTISTCommon.getCollectionAccess();
	}
	
	public ParserRule getCollectionRule() {
		return getCollectionAccess().getRule();
	}

	//Tuple:
	//	"{" tuples+=PropertyValuePair ("," tuples+=PropertyValuePair)* "}";
	public ARTISTCommonGrammarAccess.TupleElements getTupleAccess() {
		return gaARTISTCommon.getTupleAccess();
	}
	
	public ParserRule getTupleRule() {
		return getTupleAccess().getRule();
	}

	//PropertyValuePair:
	//	property=[uml::Property|QualifiedName] "=" value=ValueSpecification;
	public ARTISTCommonGrammarAccess.PropertyValuePairElements getPropertyValuePairAccess() {
		return gaARTISTCommon.getPropertyValuePairAccess();
	}
	
	public ParserRule getPropertyValuePairRule() {
		return getPropertyValuePairAccess().getRule();
	}

	//InstanceSpecificationExpression:
	//	value=[uml::InstanceSpecification|QualifiedName];
	public ARTISTCommonGrammarAccess.InstanceSpecificationExpressionElements getInstanceSpecificationExpressionAccess() {
		return gaARTISTCommon.getInstanceSpecificationExpressionAccess();
	}
	
	public ParserRule getInstanceSpecificationExpressionRule() {
		return getInstanceSpecificationExpressionAccess().getRule();
	}

	//LiteralValueExpression:
	//	NumberLiteral | BooleanLiteral | NullLiteral | StringLiteral | UnlimitedLiteral;
	public ARTISTCommonGrammarAccess.LiteralValueExpressionElements getLiteralValueExpressionAccess() {
		return gaARTISTCommon.getLiteralValueExpressionAccess();
	}
	
	public ParserRule getLiteralValueExpressionRule() {
		return getLiteralValueExpressionAccess().getRule();
	}

	//BooleanLiteral:
	//	value=EBOOLEAN;
	public ARTISTCommonGrammarAccess.BooleanLiteralElements getBooleanLiteralAccess() {
		return gaARTISTCommon.getBooleanLiteralAccess();
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//NumberLiteral:
	//	value=Number;
	public ARTISTCommonGrammarAccess.NumberLiteralElements getNumberLiteralAccess() {
		return gaARTISTCommon.getNumberLiteralAccess();
	}
	
	public ParserRule getNumberLiteralRule() {
		return getNumberLiteralAccess().getRule();
	}

	//NullLiteral:
	//	value=NULL;
	public ARTISTCommonGrammarAccess.NullLiteralElements getNullLiteralAccess() {
		return gaARTISTCommon.getNullLiteralAccess();
	}
	
	public ParserRule getNullLiteralRule() {
		return getNullLiteralAccess().getRule();
	}

	//StringLiteral:
	//	value=STRING;
	public ARTISTCommonGrammarAccess.StringLiteralElements getStringLiteralAccess() {
		return gaARTISTCommon.getStringLiteralAccess();
	}
	
	public ParserRule getStringLiteralRule() {
		return getStringLiteralAccess().getRule();
	}

	//UnlimitedLiteral:
	//	value="*";
	public ARTISTCommonGrammarAccess.UnlimitedLiteralElements getUnlimitedLiteralAccess() {
		return gaARTISTCommon.getUnlimitedLiteralAccess();
	}
	
	public ParserRule getUnlimitedLiteralRule() {
		return getUnlimitedLiteralAccess().getRule();
	}

	//OrOperator returns Operator:
	//	{OrOperator} ("or" | "||");
	public ARTISTCommonGrammarAccess.OrOperatorElements getOrOperatorAccess() {
		return gaARTISTCommon.getOrOperatorAccess();
	}
	
	public ParserRule getOrOperatorRule() {
		return getOrOperatorAccess().getRule();
	}

	//XOrOperator returns Operator:
	//	{XOrOperator} ("xor" | "^");
	public ARTISTCommonGrammarAccess.XOrOperatorElements getXOrOperatorAccess() {
		return gaARTISTCommon.getXOrOperatorAccess();
	}
	
	public ParserRule getXOrOperatorRule() {
		return getXOrOperatorAccess().getRule();
	}

	//AndOperator returns Operator:
	//	{AndOperator} ("and" | "&&");
	public ARTISTCommonGrammarAccess.AndOperatorElements getAndOperatorAccess() {
		return gaARTISTCommon.getAndOperatorAccess();
	}
	
	public ParserRule getAndOperatorRule() {
		return getAndOperatorAccess().getRule();
	}

	//ImplicationOperator returns Operator:
	//	{ImplicationOperator} ("=>" | "->");
	public ARTISTCommonGrammarAccess.ImplicationOperatorElements getImplicationOperatorAccess() {
		return gaARTISTCommon.getImplicationOperatorAccess();
	}
	
	public ParserRule getImplicationOperatorRule() {
		return getImplicationOperatorAccess().getRule();
	}

	//EqualsOperator returns Operator:
	//	{EqualsOperator} "==";
	public ARTISTCommonGrammarAccess.EqualsOperatorElements getEqualsOperatorAccess() {
		return gaARTISTCommon.getEqualsOperatorAccess();
	}
	
	public ParserRule getEqualsOperatorRule() {
		return getEqualsOperatorAccess().getRule();
	}

	//NotEqualsOperator returns Operator:
	//	{NotEqualsOperator} ("!=" | "<>");
	public ARTISTCommonGrammarAccess.NotEqualsOperatorElements getNotEqualsOperatorAccess() {
		return gaARTISTCommon.getNotEqualsOperatorAccess();
	}
	
	public ParserRule getNotEqualsOperatorRule() {
		return getNotEqualsOperatorAccess().getRule();
	}

	//NotOperator returns Operator:
	//	{NotOperator} ("!" | "not");
	public ARTISTCommonGrammarAccess.NotOperatorElements getNotOperatorAccess() {
		return gaARTISTCommon.getNotOperatorAccess();
	}
	
	public ParserRule getNotOperatorRule() {
		return getNotOperatorAccess().getRule();
	}

	//GreaterThanOperator returns Operator:
	//	{GreaterThanOperator} ">";
	public ARTISTCommonGrammarAccess.GreaterThanOperatorElements getGreaterThanOperatorAccess() {
		return gaARTISTCommon.getGreaterThanOperatorAccess();
	}
	
	public ParserRule getGreaterThanOperatorRule() {
		return getGreaterThanOperatorAccess().getRule();
	}

	//GreaterOrEqualThanOperator returns Operator:
	//	{GreaterOrEqualThanOperator} ">=";
	public ARTISTCommonGrammarAccess.GreaterOrEqualThanOperatorElements getGreaterOrEqualThanOperatorAccess() {
		return gaARTISTCommon.getGreaterOrEqualThanOperatorAccess();
	}
	
	public ParserRule getGreaterOrEqualThanOperatorRule() {
		return getGreaterOrEqualThanOperatorAccess().getRule();
	}

	//LessThanOperator returns Operator:
	//	{LessThanOperator} "<";
	public ARTISTCommonGrammarAccess.LessThanOperatorElements getLessThanOperatorAccess() {
		return gaARTISTCommon.getLessThanOperatorAccess();
	}
	
	public ParserRule getLessThanOperatorRule() {
		return getLessThanOperatorAccess().getRule();
	}

	//LessOrEqualThanOperator returns Operator:
	//	{LessOrEqualThanOperator} "<=";
	public ARTISTCommonGrammarAccess.LessOrEqualThanOperatorElements getLessOrEqualThanOperatorAccess() {
		return gaARTISTCommon.getLessOrEqualThanOperatorAccess();
	}
	
	public ParserRule getLessOrEqualThanOperatorRule() {
		return getLessOrEqualThanOperatorAccess().getRule();
	}

	//AdditionOperator returns Operator:
	//	{AdditionOperator} "+";
	public ARTISTCommonGrammarAccess.AdditionOperatorElements getAdditionOperatorAccess() {
		return gaARTISTCommon.getAdditionOperatorAccess();
	}
	
	public ParserRule getAdditionOperatorRule() {
		return getAdditionOperatorAccess().getRule();
	}

	//SubstractionOperator returns Operator:
	//	{SubstractionOperator} "-";
	public ARTISTCommonGrammarAccess.SubstractionOperatorElements getSubstractionOperatorAccess() {
		return gaARTISTCommon.getSubstractionOperatorAccess();
	}
	
	public ParserRule getSubstractionOperatorRule() {
		return getSubstractionOperatorAccess().getRule();
	}

	//MultiplicationOperator returns Operator:
	//	{MultiplicationOperator} "*";
	public ARTISTCommonGrammarAccess.MultiplicationOperatorElements getMultiplicationOperatorAccess() {
		return gaARTISTCommon.getMultiplicationOperatorAccess();
	}
	
	public ParserRule getMultiplicationOperatorRule() {
		return getMultiplicationOperatorAccess().getRule();
	}

	//DivisionOperator returns Operator:
	//	{DivisionOperator} "/";
	public ARTISTCommonGrammarAccess.DivisionOperatorElements getDivisionOperatorAccess() {
		return gaARTISTCommon.getDivisionOperatorAccess();
	}
	
	public ParserRule getDivisionOperatorRule() {
		return getDivisionOperatorAccess().getRule();
	}

	//ModulusOperator returns Operator:
	//	{ModulusOperator} "%";
	public ARTISTCommonGrammarAccess.ModulusOperatorElements getModulusOperatorAccess() {
		return gaARTISTCommon.getModulusOperatorAccess();
	}
	
	public ParserRule getModulusOperatorRule() {
		return getModulusOperatorAccess().getRule();
	}

	//MaxOperator returns Operator:
	//	{MaxOperator} "max";
	public ARTISTCommonGrammarAccess.MaxOperatorElements getMaxOperatorAccess() {
		return gaARTISTCommon.getMaxOperatorAccess();
	}
	
	public ParserRule getMaxOperatorRule() {
		return getMaxOperatorAccess().getRule();
	}

	//MinOperator returns Operator:
	//	{MinOperator} "min";
	public ARTISTCommonGrammarAccess.MinOperatorElements getMinOperatorAccess() {
		return gaARTISTCommon.getMinOperatorAccess();
	}
	
	public ParserRule getMinOperatorRule() {
		return getMinOperatorAccess().getRule();
	}

	//AvgOperator returns Operator:
	//	{AvgOperator} "avg";
	public ARTISTCommonGrammarAccess.AvgOperatorElements getAvgOperatorAccess() {
		return gaARTISTCommon.getAvgOperatorAccess();
	}
	
	public ParserRule getAvgOperatorRule() {
		return getAvgOperatorAccess().getRule();
	}

	//SumOperator returns Operator:
	//	{SumOperator} "sum";
	public ARTISTCommonGrammarAccess.SumOperatorElements getSumOperatorAccess() {
		return gaARTISTCommon.getSumOperatorAccess();
	}
	
	public ParserRule getSumOperatorRule() {
		return getSumOperatorAccess().getRule();
	}

	//ExponentialOperator returns Operator:
	//	{ExponentialOperator} "exp";
	public ARTISTCommonGrammarAccess.ExponentialOperatorElements getExponentialOperatorAccess() {
		return gaARTISTCommon.getExponentialOperatorAccess();
	}
	
	public ParserRule getExponentialOperatorRule() {
		return getExponentialOperatorAccess().getRule();
	}

	//AbsoluteOperator returns Operator:
	//	{AbsoluteOperator} "abs";
	public ARTISTCommonGrammarAccess.AbsoluteOperatorElements getAbsoluteOperatorAccess() {
		return gaARTISTCommon.getAbsoluteOperatorAccess();
	}
	
	public ParserRule getAbsoluteOperatorRule() {
		return getAbsoluteOperatorAccess().getRule();
	}

	//NaturalLogarithmOperator returns Operator:
	//	{NaturalLogarithmOperator} "ln";
	public ARTISTCommonGrammarAccess.NaturalLogarithmOperatorElements getNaturalLogarithmOperatorAccess() {
		return gaARTISTCommon.getNaturalLogarithmOperatorAccess();
	}
	
	public ParserRule getNaturalLogarithmOperatorRule() {
		return getNaturalLogarithmOperatorAccess().getRule();
	}

	//CommonLogarithmOperator returns Operator:
	//	{CommonLogarithmOperator} "log";
	public ARTISTCommonGrammarAccess.CommonLogarithmOperatorElements getCommonLogarithmOperatorAccess() {
		return gaARTISTCommon.getCommonLogarithmOperatorAccess();
	}
	
	public ParserRule getCommonLogarithmOperatorRule() {
		return getCommonLogarithmOperatorAccess().getRule();
	}

	//LeftParenthesis:
	//	"(";
	public ARTISTCommonGrammarAccess.LeftParenthesisElements getLeftParenthesisAccess() {
		return gaARTISTCommon.getLeftParenthesisAccess();
	}
	
	public ParserRule getLeftParenthesisRule() {
		return getLeftParenthesisAccess().getRule();
	}

	//RightParenthesis:
	//	")";
	public ARTISTCommonGrammarAccess.RightParenthesisElements getRightParenthesisAccess() {
		return gaARTISTCommon.getRightParenthesisAccess();
	}
	
	public ParserRule getRightParenthesisRule() {
		return getRightParenthesisAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public ARTISTCommonGrammarAccess.QualifiedNameElements getQualifiedNameAccess() {
		return gaARTISTCommon.getQualifiedNameAccess();
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//QualifiedNameWithWildcard:
	//	QualifiedName ".*"?;
	public ARTISTCommonGrammarAccess.QualifiedNameWithWildcardElements getQualifiedNameWithWildcardAccess() {
		return gaARTISTCommon.getQualifiedNameWithWildcardAccess();
	}
	
	public ParserRule getQualifiedNameWithWildcardRule() {
		return getQualifiedNameWithWildcardAccess().getRule();
	}

	//ImportURIorNamespace:
	//	"import" (importURI=STRING | importedNamespace=QualifiedNameWithWildcard);
	public ARTISTCommonGrammarAccess.ImportURIorNamespaceElements getImportURIorNamespaceAccess() {
		return gaARTISTCommon.getImportURIorNamespaceAccess();
	}
	
	public ParserRule getImportURIorNamespaceRule() {
		return getImportURIorNamespaceAccess().getRule();
	}

	//ImportURI:
	//	"import" importURI=STRING;
	public ARTISTCommonGrammarAccess.ImportURIElements getImportURIAccess() {
		return gaARTISTCommon.getImportURIAccess();
	}
	
	public ParserRule getImportURIRule() {
		return getImportURIAccess().getRule();
	}

	//ImportNamespace:
	//	"import" importedNamespace=QualifiedNameWithWildcard;
	public ARTISTCommonGrammarAccess.ImportNamespaceElements getImportNamespaceAccess() {
		return gaARTISTCommon.getImportNamespaceAccess();
	}
	
	public ParserRule getImportNamespaceRule() {
		return getImportNamespaceAccess().getRule();
	}

	//Number returns ecore::EBigDecimal:
	//	INT | POSITIVE_SMALL_DECIMAL | SMALL_DECIMAL | EBIGDECIMAL;
	public ARTISTCommonGrammarAccess.NumberElements getNumberAccess() {
		return gaARTISTCommon.getNumberAccess();
	}
	
	public ParserRule getNumberRule() {
		return getNumberAccess().getRule();
	}

	//Impact returns ecore::EBigDecimal:
	//	POSITIVE_SMALL_DECIMAL | SMALL_DECIMAL;
	public ARTISTCommonGrammarAccess.ImpactElements getImpactAccess() {
		return gaARTISTCommon.getImpactAccess();
	}
	
	public ParserRule getImpactRule() {
		return getImpactAccess().getRule();
	}

	//EBooleanObject returns ecore::EBooleanObject:
	//	NULL | EBOOLEAN;
	public ARTISTCommonGrammarAccess.EBooleanObjectElements getEBooleanObjectAccess() {
		return gaARTISTCommon.getEBooleanObjectAccess();
	}
	
	public ParserRule getEBooleanObjectRule() {
		return getEBooleanObjectAccess().getRule();
	}

	//terminal EBOOLEAN returns ecore::EBooleanObject:
	//	"true" | "false";
	public TerminalRule getEBOOLEANRule() {
		return gaARTISTCommon.getEBOOLEANRule();
	} 

	//terminal NULL:
	//	"null";
	public TerminalRule getNULLRule() {
		return gaARTISTCommon.getNULLRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaARTISTCommon.getINTRule();
	} 

	//terminal POSITIVE_SMALL_DECIMAL returns ecore::EBigDecimal:
	//	"1" ("." "0"+)? | "0" ("." "0".."9"+)? | "." "0".."9"+;
	public TerminalRule getPOSITIVE_SMALL_DECIMALRule() {
		return gaARTISTCommon.getPOSITIVE_SMALL_DECIMALRule();
	} 

	//terminal SMALL_DECIMAL returns ecore::EBigDecimal:
	//	("+" | "-")? POSITIVE_SMALL_DECIMAL;
	public TerminalRule getSMALL_DECIMALRule() {
		return gaARTISTCommon.getSMALL_DECIMALRule();
	} 

	//terminal EBIGDECIMAL returns ecore::EBigDecimal:
	//	("+" | "-")? (INT | "." INT | INT "." INT);
	public TerminalRule getEBIGDECIMALRule() {
		return gaARTISTCommon.getEBIGDECIMALRule();
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_" | "+" | "-" | "%" | "*" | "/" | "#" | ">" | "<" | "=" | "Â§") ("a".."z" | "A".."Z" |
	//	"_" | "0".."9" | "+" | "-" | "%" | "*" | "/" | "#" | ">" | "<" | "=" | "Â§")*;
	public TerminalRule getIDRule() {
		return gaARTISTCommon.getIDRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaARTISTCommon.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaARTISTCommon.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaARTISTCommon.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaARTISTCommon.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaARTISTCommon.getANY_OTHERRule();
	} 
}
