/*
 * generated by Xtext
 */
package eu.artist.postmigration.nfrvt.lang.common.ui.contentassist

import eu.artist.postmigration.nfrvt.lang.common.artistCommon.ObjectSpecificationExpression
import eu.artist.postmigration.nfrvt.lang.common.artistCommon.Tuple
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.Assignment
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor

/**
 * see http://www.eclipse.org/Xtext/documentation.html#contentAssist on how to customize content assistant
 */
class ARTISTCommonProposalProvider extends AbstractARTISTCommonProposalProvider {
	
	override completePropertyValuePair_Property(EObject model, Assignment assignment, ContentAssistContext context, ICompletionProposalAcceptor acceptor) {
		if(!(model instanceof Tuple)) {
			super.completePropertyValuePair_Property(model, assignment, context, acceptor)
			return;
		}
		
		val tuple = model as Tuple
		val spec = tuple.eContainer as ObjectSpecificationExpression
		
		spec.type.allAttributes.forEach[p | acceptor.accept(createCompletionProposal(p.name, p.name + " : " + p.type.name, p.image, context))]
	}
}
