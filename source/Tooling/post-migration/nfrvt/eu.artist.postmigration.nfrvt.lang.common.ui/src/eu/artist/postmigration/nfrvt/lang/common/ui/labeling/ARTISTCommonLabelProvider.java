/*******************************************************************************
 * Copyright (c) 2014 Vienna University of Technology.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * Martin Fleck (Vienna University of Technology) - initial API and implementation
 *
 * Initially developed in the context of ARTIST EU project www.artist-project.eu
 *******************************************************************************/
/*
* generated by Xtext
*/
package eu.artist.postmigration.nfrvt.lang.common.ui.labeling;

import java.net.URL;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.jface.resource.ImageDescriptor;
import org.eclipse.swt.graphics.Image;
import org.eclipse.ui.plugin.AbstractUIPlugin;
import org.eclipse.xtext.Keyword;

import com.google.inject.Inject;

import eu.artist.postmigration.nfrvt.lang.common.renderer.ARTISTCommonRenderer;
import eu.artist.postmigration.nfrvt.lang.common.renderer.ITextRenderer;
import eu.artist.postmigration.nfrvt.lang.common.ui.internal.ARTISTCommonActivator;

/**
 * Provides labels for a EObjects.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#labelProvider
 */
public class ARTISTCommonLabelProvider extends org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider {

	private static ARTISTCommonRenderer DEFAULT_RENDERER = new ARTISTCommonRenderer();
	private static AbstractUIPlugin DEFAULT_PLUGIN = ARTISTCommonActivator.getInstance();
	
	private ITextRenderer textRenderer;
	private AbstractUIPlugin plugin;
	
	private ITextRenderer getTextRenderer() {
		if(textRenderer == null)
			return DEFAULT_RENDERER;
		return textRenderer;
	}

	private void setTextRenderer(ITextRenderer textRenderer) {
		this.textRenderer = textRenderer;
	}

	private AbstractUIPlugin getPlugin() {
		return plugin;
	}

	private void setPlugin(AbstractUIPlugin plugin) {
		this.plugin = plugin;
	}
	
	@Inject
	public ARTISTCommonLabelProvider(org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}
	
	public ARTISTCommonLabelProvider(org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider delegate, ITextRenderer renderer, AbstractUIPlugin plugin) {
		super(delegate);
		setTextRenderer(renderer);
		setPlugin(plugin);
	}
	
	private Image getImageByName(AbstractUIPlugin plugin, String imageName) {
		if(plugin == null || imageName == null || imageName.isEmpty())
			return null;
		
		URL imgUrl = plugin.getBundle().getEntry("icons/" + imageName);
		if(imgUrl != null) {
			ImageDescriptor id = null;
			Image result = plugin.getImageRegistry().get(imgUrl.toExternalForm());
			if (result == null) {
				id = ImageDescriptor.createFromURL(imgUrl);
				if (id != null) {
					result = id.createImage();
					plugin.getImageRegistry().put(imgUrl.toExternalForm(), result);
				}
			}
			return result;
		}
		return null;
	}
	
	private Image getImageByName(AbstractUIPlugin plugin, String... possibleNames) {
		Image image = null;
		for(String name : possibleNames) {
			image = getImageByName(plugin, name);
			if(image != null)
				return image;
		}
		return null;
	}
	
	private String getImageNameGif(EClass element) {
		return element.getName() + ".gif";
	}
	
	private String getImageNamePng(EClass element) {
		return element.getName() + ".png";
	}
	
	private String getImageNameGif(Keyword keyword) {
		return "Keyword_" + keyword.getValue() + ".gif";
	}
	
	private String getImageNamePng(Keyword keyword) {
		return "Keyword_" + keyword.getValue() + ".png";
	}

	public String text(EObject element) {
		return getTextRenderer().doRender(element);
	}
	
	public Image getImageByClassName(EClass clazz) {
		Image img = getImageByName(getPlugin(), getImageNamePng(clazz), getImageNameGif(clazz));
		if(img != null)
			return img;
		return getImageByName(DEFAULT_PLUGIN, getImageNamePng(clazz), getImageNameGif(clazz));
	}
	
	public Object image(EObject element) {		
		Image img = getImageByClassName(element.eClass());
		if(img != null)
			return img;
		
		for(EClass clazz : element.eClass().getESuperTypes()) {
			img = getImageByClassName(clazz);
			if(img != null)
				return img;
		}
		
		return null;
	}
	
	public Object image(Keyword keyword) {
		Image img = getImageByName(getPlugin(), getImageNamePng(keyword), getImageNameGif(keyword), "Keyword.png", "Keyword.gif");
		if(img != null)
			return img;
		
		return getImageByName(DEFAULT_PLUGIN, getImageNamePng(keyword), getImageNameGif(keyword), "Keyword.png", "Keyword.gif");
	}
}
