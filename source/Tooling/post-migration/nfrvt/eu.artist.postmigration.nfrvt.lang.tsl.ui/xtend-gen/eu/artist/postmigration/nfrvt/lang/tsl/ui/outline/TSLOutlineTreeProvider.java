/**
 * generated by Xtext
 */
package eu.artist.postmigration.nfrvt.lang.tsl.ui.outline;

import eu.artist.postmigration.nfrvt.lang.common.artistCommon.ArtistCommonFactory;
import eu.artist.postmigration.nfrvt.lang.common.artistCommon.ImportURI;
import eu.artist.postmigration.nfrvt.lang.tsl.tsl.Pattern;
import eu.artist.postmigration.nfrvt.lang.tsl.tsl.PatternCatalogue;
import eu.artist.postmigration.nfrvt.lang.tsl.tsl.TslPackage;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.swt.graphics.Image;
import org.eclipse.xtext.ui.editor.outline.IOutlineNode;
import org.eclipse.xtext.ui.editor.outline.impl.DefaultOutlineTreeProvider;
import org.eclipse.xtext.ui.editor.outline.impl.DocumentRootNode;
import org.eclipse.xtext.ui.editor.outline.impl.EObjectNode;

/**
 * Customization of the default outline structure.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#outline
 */
@SuppressWarnings("all")
public class TSLOutlineTreeProvider extends DefaultOutlineTreeProvider {
  protected EObjectNode _createChildren(final DocumentRootNode parentNode, final PatternCatalogue modelElement) {
    EObjectNode _xblockexpression = null;
    {
      ImportURI _createImportURI = ArtistCommonFactory.eINSTANCE.createImportURI();
      Image __image = this._image(_createImportURI);
      this.createEStructuralFeatureNode(parentNode, modelElement, 
        TslPackage.Literals.PATTERN_CATALOGUE__IMPORTS, __image, 
        "Import Declarations", 
        false);
      _xblockexpression = this.createEObjectNode(parentNode, modelElement);
    }
    return _xblockexpression;
  }
  
  protected void _createChildren(final IOutlineNode parentNode, final PatternCatalogue modelElement) {
    EList<Pattern> _patterns = modelElement.getPatterns();
    for (final EObject childElement : _patterns) {
      this.createNode(parentNode, childElement);
    }
  }
}
