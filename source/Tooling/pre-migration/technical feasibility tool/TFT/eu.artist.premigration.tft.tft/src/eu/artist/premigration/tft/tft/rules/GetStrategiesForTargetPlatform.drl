/*******************************************************************************
 * Copyright (c) 2014 Atos.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * 	Burak Karaboga (Atos) - main development
 * 	Initially developed in the context of ARTIST EU project www.artist-project.eu
 *******************************************************************************/
package eu.artist.tft

import java.util.Arrays;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;

import eu.artist.premigration.tft.tft.model.Component;
import eu.artist.premigration.tft.tft.model.MigrationGoals;
import eu.artist.premigration.tft.tft.model.TechnicalGoals;

import eu.artist.premigration.tft.tft.model.migrationstrategy.MigrationStrategyContainer;
import eu.artist.premigration.tft.tft.model.migrationstrategy.MigrationStrategy;
import eu.artist.premigration.tft.tft.model.migrationstrategy.Category;
import eu.artist.premigration.tft.tft.model.migrationstrategy.Complexity;

//declare any global variables here

global java.util.List suggestedStrategyIDs;
global java.util.Map strategiesByCategory;


/**************************************************************************************************
** This rule set contains rules for collecting the available migration strategies for a component.
** 1) First the target platform is checked by the first three rules
** 2) Then according to the target platform, the rules belonging to that target platform gets fired
** 3) Lastly, for each stereotype the component has, all possible strategies belonging to that 
** stereotypes category is added to the global; strategiesByCategory
**************************************************************************************************/

//TODO: Strategy complexity assignments needs more improvements

rule "IsTargetPlatformGAE"

	when 
		 MigrationGoals( technicalGoals.iaas.selectedTargetPlatform == "GAE" )
	then
		
end

rule "IsTargetPlatformAzure"

	when 
		 MigrationGoals( technicalGoals.iaas.selectedTargetPlatform == "Azure" )
	then
		
end

rule "IsTargetPlatformEC2"

	when 
		 MigrationGoals( technicalGoals.iaas.selectedTargetPlatform == "EC2" )
	then
		
end

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////// GOOGLE APP ENGINE //////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

rule "DoesComponentHaveDataStereotype_GAE" extends "IsTargetPlatformGAE"

	when
		$component : Component ( this.hasStereotype(Category.DATA.getPossibleStereotypes()))
	then
		String[] allDataStrategyIDsForGAE = new String[]{"CLOUD_SQL", "HRD", "GCS", "MONGO", "HADOOP", "DSSHARECOUNTERS", "CQRS", "EVENTSOURCE"};
		List strategiesForCategory = new ArrayList();
		for (int i = 0; i < allDataStrategyIDsForGAE.length; i++){
			if (!suggestedStrategyIDs.contains(allDataStrategyIDsForGAE[i])){
				strategiesForCategory.add(MigrationStrategyContainer.INSTANCE.getMigrationStrategy(allDataStrategyIDsForGAE[i]));
			}
		}
		strategiesByCategory.put(Category.DATA, strategiesForCategory);
end

rule "DoesComponentHaveQueueStereotype_GAE" extends "IsTargetPlatformGAE"

	when
		$component : Component ( this.hasStereotype(Category.QUEUE.getPossibleStereotypes()))
	then
		String[] allQueueStrategyIDsForGAE = new String[]{"TQA"};
		List strategiesForCategory = new ArrayList();
		for (int i = 0; i < allQueueStrategyIDsForGAE.length; i++){
			if (!suggestedStrategyIDs.contains(allQueueStrategyIDsForGAE[i])){
				strategiesForCategory.add(MigrationStrategyContainer.INSTANCE.getMigrationStrategy(allQueueStrategyIDsForGAE[i]));
			}
		}
		if (strategiesForCategory.size() > 0) {
			strategiesByCategory.put(Category.QUEUE, strategiesForCategory);
		}
end

rule "DoesComponentHaveFrameworkStereotype_GAE" extends "IsTargetPlatformGAE"

	when
		$component : Component ( this.hasStereotype(Category.FRAMEWORK.getPossibleStereotypes()))
	then
		String[] allFrameworkStrategyIDsForGAE = new String[]{"SPRING", "STRUTS", "PLAY"};
		List strategiesForCategory = new ArrayList();
		for (int i = 0; i < allFrameworkStrategyIDsForGAE.length; i++){
			if (!suggestedStrategyIDs.contains(allFrameworkStrategyIDsForGAE[i])){
				strategiesForCategory.add(MigrationStrategyContainer.INSTANCE.getMigrationStrategy(allFrameworkStrategyIDsForGAE[i]));
			}
		}
		strategiesByCategory.put(Category.FRAMEWORK, strategiesForCategory);
end

rule "DoesComponentHaveViewStereotype_GAE" extends "IsTargetPlatformGAE"

	when
		$component : Component ( this.hasStereotype(Category.VIEW.getPossibleStereotypes()))
	then
		String[] allViewkStrategyIDsForGAE = new String[]{"GWT", "EXTJS"};
		List strategiesForCategory = new ArrayList();
		for (int i = 0; i < allViewkStrategyIDsForGAE.length; i++){
			if (!suggestedStrategyIDs.contains(allViewkStrategyIDsForGAE[i])){
				strategiesForCategory.add(MigrationStrategyContainer.INSTANCE.getMigrationStrategy(allViewkStrategyIDsForGAE[i]));
			}
		}
		strategiesByCategory.put(Category.VIEW, strategiesForCategory);
end

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////// WINDOWS AZURE //////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


rule "DoesComponentHaveDataStereotype_Azure" extends "IsTargetPlatformAzure"

	when
		$component : Component ( this.hasStereotype(Category.DATA.getPossibleStereotypes()))
	then
		String[] allDataStrategyIDsForAzure = new String[]{"AZURE_SQL", "BSS", "MONGO", "HDINSIGHT", "AZUSQLDBSHARDING", "CQRS", "EVENTSOURCE"};
		List strategiesForCategory = new ArrayList();
		for (int i = 0; i < allDataStrategyIDsForAzure.length; i++){
			if (!suggestedStrategyIDs.contains(allDataStrategyIDsForAzure[i])){
				strategiesForCategory.add(MigrationStrategyContainer.INSTANCE.getMigrationStrategy(allDataStrategyIDsForAzure[i]));
			}
		}
		strategiesByCategory.put(Category.DATA, strategiesForCategory);
end

rule "DoesComponentHaveQueueStereotype_Azure" extends "IsTargetPlatformAzure"

	when
		$component : Component ( this.hasStereotype(Category.QUEUE.getPossibleStereotypes()))
	then
		String[] allQueueStrategyIDsForAzure = new String[]{"TQA"};
		List strategiesForCategory = new ArrayList();
		for (int i = 0; i < allQueueStrategyIDsForAzure.length; i++){
			if (!suggestedStrategyIDs.contains(allQueueStrategyIDsForAzure[i])){
				strategiesForCategory.add(MigrationStrategyContainer.INSTANCE.getMigrationStrategy(allQueueStrategyIDsForAzure[i]));
			}
		}
		if (strategiesForCategory.size() > 0) {
			strategiesByCategory.put(Category.QUEUE, strategiesForCategory);
		}
end

rule "DoesComponentHaveFrameworkStereotype_Azure" extends "IsTargetPlatformAzure"

	when
		$component : Component ( this.hasStereotype(Category.FRAMEWORK.getPossibleStereotypes()))
	then
		String[] allFrameworkStrategyIDsForAzure = new String[]{"ASP_MVC", "DRUPAL"};
		List strategiesForCategory = new ArrayList();
		for (int i = 0; i < allFrameworkStrategyIDsForAzure.length; i++){
			if (!suggestedStrategyIDs.contains(allFrameworkStrategyIDsForAzure[i])){
				strategiesForCategory.add(MigrationStrategyContainer.INSTANCE.getMigrationStrategy(allFrameworkStrategyIDsForAzure[i]));
			}
		}
		strategiesByCategory.put(Category.FRAMEWORK, strategiesForCategory);
end

rule "DoesComponentHaveViewStereotype_Azure" extends "IsTargetPlatformAzure"

	when
		$component : Component ( this.hasStereotype(Category.VIEW.getPossibleStereotypes()))
	then
		String[] allViewStrategyIDsForAzure = new String[]{"ASP"};
		List strategiesForCategory = new ArrayList();
		for (int i = 0; i < allViewStrategyIDsForAzure.length; i++){
			if (!suggestedStrategyIDs.contains(allViewStrategyIDsForAzure[i])){
				strategiesForCategory.add(MigrationStrategyContainer.INSTANCE.getMigrationStrategy(allViewStrategyIDsForAzure[i]));
			}
		}
		strategiesByCategory.put(Category.VIEW, strategiesForCategory);
end

rule "DoesComponentHaveVisualizationStereotype_Azure" extends "IsTargetPlatformAzure"

	when
		$component : Component ( this.hasStereotype(Category.VISUALIZATION.getPossibleStereotypes()))
	then
		String[] allVisualizationStrategyIDsForAzure = new String[]{"DIAGRAMO"};
		List strategiesForCategory = new ArrayList();
		for (int i = 0; i < allVisualizationStrategyIDsForAzure.length; i++){
			if (!suggestedStrategyIDs.contains(allVisualizationStrategyIDsForAzure[i])){
				strategiesForCategory.add(MigrationStrategyContainer.INSTANCE.getMigrationStrategy(allVisualizationStrategyIDsForAzure[i]));
			}
		}
		strategiesByCategory.put(Category.VISUALIZATION, strategiesForCategory);
end

rule "DoesComponentHaveLoggingStereotype_Azure" extends "IsTargetPlatformAzure"

	when
		$component : Component ( this.hasStereotype(Category.LOGGING.getPossibleStereotypes()))
	then
		String[] allLoggingStrategyIDsForAzure = new String[]{"LOG4NET"};
		List strategiesForCategory = new ArrayList();
		for (int i = 0; i < allLoggingStrategyIDsForAzure.length; i++){
			if (!suggestedStrategyIDs.contains(allLoggingStrategyIDsForAzure[i])){
				strategiesForCategory.add(MigrationStrategyContainer.INSTANCE.getMigrationStrategy(allLoggingStrategyIDsForAzure[i]));
			}
		}
		strategiesByCategory.put(Category.LOGGING, strategiesForCategory);
end

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////// AMAZON EC2 /////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


rule "DoesComponentHaveDataStereotype_EC2" extends "IsTargetPlatformEC2"

	when
		$component : Component ( this.hasStereotype(Category.DATA.getPossibleStereotypes()))
	then
		String[] allDataStrategyIDsForEC2 = new String[]{"DYNAMO", "RDS", "MONGO", "S3", "GLACIER", "BLOCK", "MAPREDUCE", "AWSRDSSHARDING", "CQRS", "EVENTSOURCE"};
		List strategiesForCategory = new ArrayList();
		for (int i = 0; i < allDataStrategyIDsForEC2.length; i++){
			if (!suggestedStrategyIDs.contains(allDataStrategyIDsForEC2[i])){
				strategiesForCategory.add(MigrationStrategyContainer.INSTANCE.getMigrationStrategy(allDataStrategyIDsForEC2[i]));
			}
		}
		strategiesByCategory.put(Category.DATA, strategiesForCategory);
end

rule "DoesComponentHaveQueueStereotype_EC2" extends "IsTargetPlatformEC2"

	when
		$component : Component ( this.hasStereotype(Category.QUEUE.getPossibleStereotypes()))
	then
		String[] allQueueStrategyIDsForEC2 = new String[]{"SQS"};
		List strategiesForCategory = new ArrayList();
		for (int i = 0; i < allQueueStrategyIDsForEC2.length; i++){
			if (!suggestedStrategyIDs.contains(allQueueStrategyIDsForEC2[i])){
				strategiesForCategory.add(MigrationStrategyContainer.INSTANCE.getMigrationStrategy(allQueueStrategyIDsForEC2[i]));
			}
		}
		if (strategiesForCategory.size() > 0) {
			strategiesByCategory.put(Category.QUEUE, strategiesForCategory);
		}
end

rule "DoesComponentHaveFrameworkStereotype_EC2" extends "IsTargetPlatformEC2"

	when
		$component : Component ( this.hasStereotype(Category.FRAMEWORK.getPossibleStereotypes()))
	then
		String[] allFrameworkStrategyIDsForEC2 = new String[]{"SPRING", "STRUTS", "DRUPAL", "ASP_MVC"};
		List strategiesForCategory = new ArrayList();
		for (int i = 0; i < allFrameworkStrategyIDsForEC2.length; i++){
			if (!suggestedStrategyIDs.contains(allFrameworkStrategyIDsForEC2[i])){
				strategiesForCategory.add(MigrationStrategyContainer.INSTANCE.getMigrationStrategy(allFrameworkStrategyIDsForEC2[i]));
			}
		}
		strategiesByCategory.put(Category.FRAMEWORK, strategiesForCategory);
end

rule "DoesComponentHaveViewStereotype_EC2" extends "IsTargetPlatformEC2"

	when
		$component : Component ( this.hasStereotype(Category.VIEW.getPossibleStereotypes()))
	then
		String[] allViewStrategyIDsForEC2 = new String[]{"GWT", "EXTJS", "ASP"};
		List strategiesForCategory = new ArrayList();
		for (int i = 0; i < allViewStrategyIDsForEC2.length; i++){
			if (!suggestedStrategyIDs.contains(allViewStrategyIDsForEC2[i])){
				strategiesForCategory.add(MigrationStrategyContainer.INSTANCE.getMigrationStrategy(allViewStrategyIDsForEC2[i]));
			}
		}
		strategiesByCategory.put(Category.VIEW, strategiesForCategory);
end

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////// PROVIDER INDEPENDENT //////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
rule "DoesComponentHaveDataStereotype" 

	when
		$component : Component ( this.hasStereotype(Category.DATA.getPossibleStereotypes()))
	then
		String[] allDataStrategyIDs = new String[]{"CQRS"};
		List strategiesForCategory = new ArrayList();
		for (int i = 0; i < allDataStrategyIDs.length; i++){
			if (!suggestedStrategyIDs.contains(allDataStrategyIDs[i])){
				strategiesForCategory.add(MigrationStrategyContainer.INSTANCE.getMigrationStrategy(allDataStrategyIDs[i]));
			}
		}
		strategiesByCategory.put(Category.DATA, strategiesForCategory);
end
*/
