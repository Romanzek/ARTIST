<?xml version="1.0" encoding="UTF-8"?>

<!--
 *******************************************************************************
 * Copyright (c) 2014 Atos.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 * 	Burak Karaboga (Atos) - main development
 * 	Initially developed in the context of ARTIST EU project www.artist-project.eu
 *******************************************************************************
 -->

<!-- 
	All the migration strategies available in TFT are defined in this xml file. Each strategy has an ID, a text value for name, a category and complexity of
	unknown value is assigned to it. 
	
	TODO: Short descriptions for each strategy. 
 -->
 
 <!--  Daemon : GAE : Background Thread API -->

<MigrationStrategies>

	<!-- ###########################################  GAE  ############################################# -->
	
	<!-- ///////////////////////// APPLICATION //////////////////////////// -->
	<MigrationStrategy> 
		<id>NAMESPACES</id>
		<text>Adopt GAE Namespaces API</text>
		<description>This API enables the hosting and administration of multitenant applications on GAE.</description>
		<category>APPLICATION</category>
		<complexity>UNKNOWN</complexity>
	<targetPlatform>GAE</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>SEARCH</id>
		<text>Adopt Google Search</text>
		<description>This service offers the ability of performing search over structured data.</description>
		<category>APPLICATION</category>
		<complexity>UNKNOWN</complexity>
	<targetPlatform>GAE</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>PSEARCH</id>
		<text>Adopt Prospective Search</text>
		<description>This querying service enables registering queries and matching them against real-time data streams.</description>
		<category>APPLICATION</category>
		<complexity>UNKNOWN</complexity>
	<targetPlatform>GAE</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>CAPABILITIES</id>
		<text>Adopt Capabilities API</text>
		<description>This API serves for detecting other services availabilities and thus bypassing them.</description>
		<category>APPLICATION</category>
		<complexity>UNKNOWN</complexity>
	<targetPlatform>GAE</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>IMAGE</id>
		<text>Adopt Image Service</text>
		<description>This service offers basic transformations on image data such as, resize, rotate, flip, crop etc.</description>
		<category>APPLICATION</category>
		<complexity>UNKNOWN</complexity>
	<targetPlatform>GAE</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>GCE</id>
		<text>Adopt Google Cloud Endpoints</text>
		<description>This service makes it possible to develop API backends to allow and simplify the access of data in cloud by applications outside the cloud</description>
		<category>APPLICATION</category>
		<complexity>UNKNOWN</complexity>
	<targetPlatform>GAE</targetPlatform>
	</MigrationStrategy>
	
	<!-- ///////////////////////// FRAMEWORK //////////////////////////// -->
	
	<MigrationStrategy>
		<id>PLAY</id>
		<text>Migrate to Google Play</text>
		<description>Play is an open source web application framework, written in Scala and Java, which follows the model–view–controller (MVC) architectural pattern.</description>
		<category>FRAMEWORK</category>
		<complexity>UNKNOWN</complexity>
	<targetPlatform>GAE</targetPlatform>
	</MigrationStrategy>
	
	<!-- ///////////////////////// DATA //////////////////////////// -->
	<MigrationStrategy>
		<id>CLOUD_SQL</id>
		<text>Migrate to Google Cloud SQL</text>
		<description> </description>
		<category>DATA</category>
		<complexity>UNKNOWN</complexity>
	<targetPlatform>GAE</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>HRD</id>
		<text>Migrate to HRD</text>
		<description> </description>
		<category>DATA</category>
		<complexity>UNKNOWN</complexity>
	<targetPlatform>GAE</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>GCS</id>
		<text>Migrate to Google Cloud Storage</text>
		<description> </description>
		<category>DATA</category>
		<complexity>UNKNOWN</complexity>
	<targetPlatform>GAE</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>DSSHARECOUNTERS</id>
		<text>Sharding using GAE Datastore Share Counters</text>
		<description>Improve database query capability sharding your data through horizontal scaling</description>
		<category>DATA</category>
		<complexity>UNKNOWN</complexity>
	<targetPlatform>GAE</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>GAEDS</id>
		<text>Apply Key-Value storage using GAE Datastore</text>
		<description>When cloud applications need to handle large amounts of data that may be globally distributed, it is better to use a key-value storage </description>
		<category>DATA</category>
		<complexity>AVERAGE</complexity>
	<targetPlatform>GAE</targetPlatform>
	</MigrationStrategy>
	
	<!-- ///////////////////////// REALTIME MESSAGING //////////////////////////// -->	
	<MigrationStrategy>
		<id>CHANNEL</id>
		<text>Migrate to Channel</text>
		<description> </description>
		<category>REALTIMEMSG</category>
		<complexity>UNKNOWN</complexity>
	<targetPlatform>GAE</targetPlatform>
	</MigrationStrategy>
	
	<!-- ///////////////////////// NETWORK //////////////////////////// -->	
	
	<MigrationStrategy>
		<id>GAECDN</id>
		<text>Adopt GAE Instant CDN</text>
		<description>The Content Delivery Network (CDN) is a service that functions as a globally distributed cache</description>
		<category>NETWORK</category>
		<complexity>LOW</complexity>
	<targetPlatform>GAE</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>GAEADMINCONSOLE</id>
		<text>Monitor application health using GAE Administration Console</text>
		<description>Monitor the health of your application endpoints using GAE Administration Console</description>
		<category>NETWORK</category>
		<complexity>LOW</complexity>
	<targetPlatform>GAE</targetPlatform>
	</MigrationStrategy>
	
	<!-- ///////////////////////// QUEUE //////////////////////////// -->	
	<!--
	<MigrationStrategy>
		<id>TQA</id>
		<text>Migrate to TQA</text>
		<description></description>
		<category>QUEUE</category>
		<complexity>AVERAGE</complexity>
	<targetPlatform>GAE</targetPlatform>
	</MigrationStrategy>
	-->
	
	<MigrationStrategy>
		<id>GAETHROTTLING</id>
		<text>Adopt throttling using GAE Task Queue API</text>
		<description>Enable throttling patterns to automate the management of consumed application resources</description>
		<category>QUEUE</category>
		<complexity>AVERAGE</complexity>
	<targetPlatform>GAE</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>GAEQCW</id>
		<text>Adopt Queue Centric Workflow using GAE Task Queue API</text>
		<description>The Queue-Centric Workflow Pattern is an essential pattern for loose coupling and focuses on asynchronous delivery of command requests sent from the user interface to a back-end service for processing</description>
		<category>QUEUE</category>
		<complexity>AVERAGE</complexity>
	<targetPlatform>GAE</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>GAEPRIORITYQUEUE</id>
		<text>Adopt Priority Queue using GAE Task Queue API</text>
		<description>Process user's requests with a higher priority earlier even if they arrive after others with low priority. </description>
		<category>QUEUE</category>
		<complexity>LOW</complexity>
	<targetPlatform>GAE</targetPlatform>
	</MigrationStrategy>
	
	<!-- ///////////////////////// PERFORMANCE //////////////////////////// -->	
	<MigrationStrategy>
		<id>MEMCACHE</id>
		<text>Use GAE MemCache</text>
		<description>A caching system supports the application for succeeding low latency access to the results of I/O intensive database queries</description>
		<category>PERFORMANCE</category>
		<complexity>LOW</complexity>
	<targetPlatform>GAE</targetPlatform>
	</MigrationStrategy>
	
	<!-- ///////////////////////// SECURITY //////////////////////////// -->
	<MigrationStrategy>
		<id>GAEFEDID</id>
		<text>Adopt Federated Identity with Google OpenID/OAuth</text>
		<description>Implement an authentication mechanism that can use federated identity</description>
		<category>SECURITY</category>
		<complexity>LOW</complexity>
	<targetPlatform>GAE</targetPlatform>
	</MigrationStrategy>
	
	<!-- ###########################################  AMAZON  ############################################# -->
	
	<!-- ///////////////////////// APPLICATION //////////////////////////// -->
	
	<MigrationStrategy>
		<id>AUTOS</id>
		<text>Adopt Amazon Auto Scaling</text>
		<description>This web service scales up or down the selected EC2 instances when the conditions have been met.</description>
		<category>APPLICATION</category>
		<complexity>UNKNOWN</complexity>
	<targetPlatform>EC2</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>CLOUDWATCH</id>
		<text>Adopt CloudWatch</text>
		<description>This service is responsible for monitoring most of the EC2 services.</description>
		<category>APPLICATION</category>
		<complexity>UNKNOWN</complexity>
	<targetPlatform>EC2</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>SWS</id>
		<text>Adopt Simple Workflow Service</text>
		<description>This service allows workflow management, coordination of tasks structured as processing steps, control of task-host assignments, monitoring of workflow execution</description>
		<category>APPLICATION</category>
		<complexity>UNKNOWN</complexity>
	<targetPlatform>EC2</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>CLOUDSEARCH</id>
		<text>Adopt CloudSearch</text>
		<description>This service provides high throughput and low latency search over large data collections.</description>
		<category>APPLICATION</category>
		<complexity>UNKNOWN</complexity>
	<targetPlatform>EC2</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>HYPERVISOR</id>
		<text>Adopt AWS Hypervisor</text>
		<description>Rely on AWS hypervisor to provide isolation between tenants.</description>
		<category>APPLICATION</category>
		<complexity>UNKNOWN</complexity>
	<targetPlatform>EC2</targetPlatform>
	</MigrationStrategy>
	
	<!-- ///////////////////////// NETWORK //////////////////////////// -->
	
	<MigrationStrategy>
		<id>ELASTICLB</id>
		<text>Adopt Elastic Load Balancing</text>
		<description>This service is responsible for automatically distributing incoming traffic across multiple EC2 instances.</description>
		<category>NETWORK</category>
		<complexity>LOW</complexity>
	<targetPlatform>EC2</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>MULTISITEDEPLOY</id>
		<text>Adopt Multisite deployment with Azure Traffic Manager and Service Bus</text>
		<description>Deploying to multiple data centers helps reduce network latency by routing a client to the nearest data center, which improves the user experience.</description>
		<category>NETWORK</category>
		<complexity>LOW</complexity>
	<targetPlatform>EC2</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>ROUTE53</id>
		<text>Monitor application health using Amazon Route 53</text>
		<description>Monitor the health of your application endpoints using Amazon Route 53</description>
		<category>NETWORK</category>
		<complexity>LOW</complexity>
	<targetPlatform>EC2</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>AVPC</id>
		<text>Adopt Amazon Virtual Private Cloud</text>
		<description> </description>
		<category>NETWORK</category>
		<complexity>UNKNOWN</complexity>
		<targetPlatform>EC2</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>ADC</id>
		<text>Adopt Amazon Direct Connect</text>
		<description> </description>
		<category>NETWORK</category>
		<complexity>UNKNOWN</complexity>
		<targetPlatform>EC2</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>TRAFFICMANAGER</id>
		<text>Monitor application health using Amazon Traffic Manager</text>
		<description>Monitor the health of your application endpoints using Azure Traffic Manager</description>
		<category>NETWORK</category>
		<complexity>LOW</complexity>
		<targetPlatform>EC2</targetPlatform>
	</MigrationStrategy>
	
	<!-- ///////////////////////// DATA //////////////////////////// -->
	<MigrationStrategy>
		<id>CLOUDFRONT</id>
		<text>Migrate to CloudFront</text>
		<description>Distributes dynamic, static or streaming content to multiple locations using a global network of edge locations.</description>
		<category>DATA</category>
		<complexity>LOW</complexity>
	<targetPlatform>EC2</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>DYNAMO</id>
		<text>Apply Key-Value storage using Amazon DynamoDB</text>
		<description>When cloud applications need to handle large amounts of data that may be globally distributed, it is better to use a key-value storage.</description>
		<category>DATA</category>
		<complexity>AVERAGE</complexity>
	<targetPlatform>EC2</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>SIMPLEDB</id>
		<text>Apply Key-Value storage using Amazon SimpleDB</text>
		<description>When cloud applications need to handle large amounts of data that may be globally distributed, it is better to use a key-value storage.</description>
		<category>DATA</category>
		<complexity>AVERAGE</complexity>
	<targetPlatform>EC2</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>RDS</id>
		<text>Migrate to Amazon RDS</text>
		<description> </description>
		<category>DATA</category>
		<complexity>UNKNOWN</complexity>
	<targetPlatform>EC2</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>S3</id>
		<text>Migrate to Amazon S3</text>
		<description> </description>
		<category>DATA</category>
		<complexity>UNKNOWN</complexity>
	<targetPlatform>EC2</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>GLACIER</id>
		<text>Migrate to Amazon Glacier</text>
		<description> </description>
		<category>DATA</category>
		<complexity>UNKNOWN</complexity>
	<targetPlatform>EC2</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>BLOCK</id>
		<text>Migrate to Amazon Elastic Block Storage</text>
		<description> </description>
		<category>DATA</category>
		<complexity>UNKNOWN</complexity>
	<targetPlatform>EC2</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>REDSHIFT</id>
		<text>Migrate to Amazon Redshift</text>
		<description> </description>
		<category>DATA</category>
		<complexity>UNKNOWN</complexity>
	<targetPlatform>EC2</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>MAPREDUCE</id>
		<text>Migrate to Amazon Elastic MapReduce</text>
		<description>Use MadReduce pattern in order to improve the processing of big data, using multiple available parallel-running nodes</description>
		<category>DATA</category>
		<complexity>HIGH</complexity>
	<targetPlatform>EC2</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>AWSRDSSHARDING</id>
		<text>Sharding using Amazon RDS</text>
		<description>Improve database query capability sharding your data through horizontal scaling</description>
		<category>DATA</category>
		<complexity>UNKNOWN</complexity>
		<targetPlatform>EC2</targetPlatform>
	</MigrationStrategy>
	
	<!-- ///////////////////////// FRAMEWORK //////////////////////////// -->
	<MigrationStrategy>
		<id>DATAPIPELINE</id>
		<text>Adopt Data Pipeline</text>
		<description>This service allows facilitating data process and transfer between different AWS services or on-premises datasources</description>
		<category>FRAMEWORK</category>
		<complexity>LOW</complexity>
	<targetPlatform>EC2</targetPlatform>
	</MigrationStrategy>
	
	<!-- ///////////////////////// SECURITY //////////////////////////// -->
	<MigrationStrategy>
		<id>EC2GATEKEEPER</id>
		<text>Adopt Gate Keeper pattern using Amazon Simple Queue Service</text>
		<description>Use a facade or a dedicated task that interacts with clients and then hands off the request to the hosts or tasks that will handle the request.</description>
		<category>SECURITY</category>
		<complexity>LOW</complexity>
	<targetPlatform>EC2</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>EC2FEDID</id>
		<text>Adopt Federated Identity with AWS Identity and Access Management</text>
		<description>Implement an authentication mechanism that can use federated identity</description>
		<category>SECURITY</category>
		<complexity>LOW</complexity>
	<targetPlatform>EC2</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>EC2VALET</id>
		<text>Adopt Valet key pattern using AWS Query String Authentication</text>
		<description>This pattern enables specifying that a user of the application is allowed to access very specific areas within your cloud storage account, with specific permissions, and for a limited amount of time.</description>
		<category>SECURITY</category>
		<complexity>LOW</complexity>
		<targetPlatform>EC2</targetPlatform>
	</MigrationStrategy>
	
	<!-- ///////////////////////// QUEUE //////////////////////////// -->
	
	<MigrationStrategy>
		<id>EC2THROTTLING</id>
		<text>Adopt throttling using Amazon Simple Queue Service</text>
		<description>Enable throttling pattern to automate the management of consumed application resources</description>
		<category>QUEUE</category>
		<complexity>AVERAGE</complexity>
		<targetPlatform>EC2</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>EC2QCW</id>
		<text>Adopt Queue Centric Workflow using Amazon Simple Queue Service</text>
		<description>The Queue-Centric Workflow Pattern is an essential pattern for loose coupling and focuses on asynchronous delivery of command requests sent from the user interface to a back-end service for processing</description>
		<category>QUEUE</category>
		<complexity>AVERAGE</complexity>
		<targetPlatform>EC2</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>EC2PRIORITYQUEUE</id>
		<text>Adopt Priority Queue using Amazon Simple Queue Service</text>
		<description>Process user's requests with a higher priority earlier even if they arrive after others with low priority.</description>
		<category>QUEUE</category>
		<complexity>LOW</complexity>
		<targetPlatform>EC2</targetPlatform>
	</MigrationStrategy>
	
	<!-- ///////////////////////// PERFORMANCE //////////////////////////// -->
	<MigrationStrategy>
		<id>ELASTICACHE</id>
		<text>Use Amazon ElastiCache</text>
		<description>A caching system supports the application for succeeding low latency access to the results of I/O intensive database queries</description>
		<category>PERFORMANCE</category>
		<complexity>LOW</complexity>
		<targetPlatform>EC2</targetPlatform>
	</MigrationStrategy>
	
	<!-- ###########################################  AZURE  #################################################### -->
	
	<!-- ///////////////////////// APPLICATION //////////////////////////// -->
	
	<MigrationStrategy>
		<id>AZUREAUTOSCALING</id>
		<text>Adopt Azure auto scaling</text>
		<description>User Azure Management Portal/Azure Diagnostics for: i) Setting monitoring parameter values as thresholds for triggering automatic scaling. ii) Monitor performance parameters, configure autoscaling policy details, set autoscaling thresholds and/or desired performance rates.</description>
		<category>APPLICATION</category>
		<complexity>UNKNOWN</complexity>
		<targetPlatform>AZURE</targetPlatform>
	</MigrationStrategy>
	
	<!-- ///////////////////////// FRAMEWORK //////////////////////////// -->
	<MigrationStrategy>
		<id>ASP_MVC</id>
		<text>Migrate to ASP.NET MVC</text>
		<description>Based on ASP.NET, ASP.NET MVC (a.k.a. ASP.NET Web API) allows software developers to build a web application as a composition of three roles: Model, View and Controller.</description>
		<category>FRAMEWORK</category>
		<complexity>UNKNOWN</complexity>
		<targetPlatform>AZURE</targetPlatform>
	</MigrationStrategy>
	
	<!-- ///////////////////////// VIEW //////////////////////////// -->
	<MigrationStrategy>
		<id>ASP</id>
		<text>Migrate to ASP.NET</text>
		<description>ASP.NET is a server-side Web application framework designed for Web development to produce dynamic Web pages.</description>
		<category>VIEW</category>
		<complexity>UNKNOWN</complexity>
		<targetPlatform>AZURE</targetPlatform>
	</MigrationStrategy>
	
	<!-- ///////////////////////// DATA //////////////////////////// -->
	<MigrationStrategy>
		<id>AZURE_SQL</id>
		<text>Migrate to Windows Azure SQL</text>
		<description>Azure SQL Database provides a cloud-based relational database platform using SQL Server technologies.</description>
		<category>DATA</category>
		<complexity>UNKNOWN</complexity>
		<targetPlatform>AZURE</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>BSS</id>
		<text>Migrate to Azure BLOB Storage Service</text>
		<description> </description>
		<category>DATA</category>
		<complexity>UNKNOWN</complexity>
		<targetPlatform>AZURE</targetPlatform>
	</MigrationStrategy>

	<MigrationStrategy>
		<id>HDINSIGHT</id>
		<text>Migrate to Azure HDInsight</text>
		<description>Use MadReduce pattern in order to improve the processing of big data, using multiple available parallel-running nodes</description>
		<category>DATA</category>
		<complexity>UNKNOWN</complexity>
		<targetPlatform>AZURE</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>AZUSQLDBSHARDING</id>
		<text>Sharding using Azure SQL Database</text>
		<description>Improve database query capability sharding your data through horizontal scaling</description>
		<category>DATA</category>
		<complexity>UNKNOWN</complexity>
		<targetPlatform>AZURE</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>AZUSQLDBSHARDING</id>
		<text>Sharding using Azure SQL Database</text>
		<description>Improve database query capability sharding your data through horizontal scaling</description>
		<category>DATA</category>
		<complexity>UNKNOWN</complexity>
		<targetPlatform>AZURE</targetPlatform>
	</MigrationStrategy>
	
	<!-- ///////////////////////// SECURITY //////////////////////////// -->
	<MigrationStrategy>
		<id>AZUREGATEKEEPER</id>
		<text>Adopt Gate Keeper pattern using Azure Storage Queue</text>
		<description>Use a facade or a dedicated task that interacts with clients and then hands off the request to the hosts or tasks that will handle the request.</description>
		<category>SECURITY</category>
		<complexity>LOW</complexity>
		<targetPlatform>AZURE</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>AZUREFEDID</id>
		<text>Adopt Federated Identity with Azure AppFabric Access Control</text>
		<description>Implement an authentication mechanism that can use federated identity</description>
		<category>SECURITY</category>
		<complexity>LOW</complexity>
		<targetPlatform>AZURE</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>AZUREVALET</id>
		<text>Adopt Valet key pattern using Azure Shared Access Signature</text>
		<description>This pattern enables specifying that a user of the application is allowed to access very specific areas within your cloud storage account, with specific permissions, and for a limited amount of time.</description>
		<category>SECURITY</category>
		<complexity>LOW</complexity>
		<targetPlatform>AZURE</targetPlatform>
	</MigrationStrategy>
	
	<!-- ///////////////////////// VIZUALIZATION //////////////////////////// -->
	<MigrationStrategy>
		<id>DIAGRAMO</id>
		<text>Migrate to DIAGRAMO</text>
		<description> </description>
		<category>VISUALIZATION</category>
		<complexity>UNKNOWN</complexity>
		<targetPlatform>AZURE</targetPlatform>
	</MigrationStrategy>
	
	<!-- ///////////////////////// LOGGING //////////////////////////// -->
	<MigrationStrategy>
		<id>LOG4NET</id>
		<text>Migrate to Log4Net</text>
		<description> </description>
		<category>LOGGING</category>
		<complexity>UNKNOWN</complexity>
		<targetPlatform>AZURE</targetPlatform>
	</MigrationStrategy>
	
	<!-- ///////////////////////// QUEUE //////////////////////////// -->
	<MigrationStrategy>
		<id>AZURETHROTTLING</id>
		<text>Adopt throttling using Azure Service Bus</text>
		<description>Enable throttling pattern to automate the management of consumed application resources using Azure Service Bus</description>
		<category>QUEUE</category>
		<complexity>AVERAGE</complexity>
		<targetPlatform>AZURE</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>AZUREQCW</id>
		<text>Adopt Queue Centric Workflow using Azure SB and Storage Queues</text>
		<description>The Queue-Centric Workflow Pattern is an essential pattern for loose coupling and focuses on asynchronous delivery of command requests sent from the user interface to a back-end service for processing</description>
		<category>QUEUE</category>
		<complexity>AVERAGE</complexity>
		<targetPlatform>AZURE</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>AZUREPRIORITYQUEUE</id>
		<text>Adopt Priority Queue using Azure Service Bus</text>
		<description>Process user's requests with a higher priority earlier even if they arrive after others with low priority.</description>
		<category>QUEUE</category>
		<complexity>LOW</complexity>
		<targetPlatform>AZURE</targetPlatform>
	</MigrationStrategy>
	
	<!-- ///////////////////////// NETWORK //////////////////////////// -->
	<MigrationStrategy>
		<id>AVN</id>
		<text>Adopt Azure Virtual Network</text>
		<description> </description>
		<category>NETWORK</category>
		<complexity>UNKNOWN</complexity>
		<targetPlatform>AZURE</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>COLOCATE</id>
		<text>Adopt Colocate pattern using Azure Computing and Storage</text>
		<description>Minimize network latency across your application tiers by collocating them in the same data center</description>
		<category>NETWORK</category>
		<complexity>LOW</complexity>
		<targetPlatform>AZURE</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>AFFINITY</id>
		<text>Adopt collocate pattern using Azure Affinity Groups</text>
		<description>Notify Azure Fabric Controller that two elements (i.e. services) should always be together and close to one another</description>
		<category>NETWORK</category>
		<complexity>LOW</complexity>
		<targetPlatform>AZURE</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>NODEFAILUREAZURE</id>
		<text>Adopt Node Failure pattern using Azure Fabric Controller</text>
		<description>Windows Azure Fabric Controller provisions, stores, delivers, monitors and commands the virtual machines (VMs) and physical servers that make up Azure</description>
		<category>NETWORK</category>
		<complexity>LOW</complexity>
		<targetPlatform>AZURE</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>TOPAZ</id>
		<text>Adopt Busy Signal pattern using Azure Topaz</text>
		<description>Topaz (Transient Fault Handling Application Block) has some predefined retry behavior and also a rich model for customization when accessing Windows Azure SQL Databases, Windows Azure Storage, Windows Azure Caching and Windows Azure Service Bus</description>
		<category>NETWORK</category>
		<complexity>AVERAGE</complexity>
		<targetPlatform>AZURE</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>AZURECDN</id>
		<text>Adopt Azure CDN</text>
		<description>The Content Delivery Network (CDN) is a service that functions as a globally distributed cache</description>
		<category>NETWORK</category>
		<complexity>LOW</complexity>
		<targetPlatform>AZURE</targetPlatform>
	</MigrationStrategy>
	
	<!-- ///////////////////////// PERFORMANCE //////////////////////////// -->
	<MigrationStrategy>
		<id>AZURECACHING</id>
		<text>Use Azure Caching</text>
		<description>A caching system supports the application for succeeding low latency access to the results of I/O intensive database queries</description>
		<category>PERFORMANCE</category>
		<complexity>UNKNOWN</complexity>
		<targetPlatform>AZURE</targetPlatform>
	</MigrationStrategy>
	
	<!-- ###########################################  MULTIPLE TARGET PLATFORMS  #################################################### -->
	
	<!-- ///////////////////////// VIEW //////////////////////////// -->
	<MigrationStrategy>
		<id>GWT</id>
		<text>Migrate to GWT</text>
		<description>GWT is a set of tools that allows web developers to create and maintain complex JavaScript front-end applications in Java.</description>
		<category>VIEW</category>
		<complexity>UNKNOWN</complexity>
		<targetPlatform>GAE</targetPlatform>
		<targetPlatform>EC2</targetPlatform>
	</MigrationStrategy>

	<MigrationStrategy>
		<id>EXTJS</id>
		<text>Migrate to ExtJS</text>
		<description>Ext JS is a pure JavaScript application framework for building interactive web applications[1] using techniques such as Ajax, DHTML and DOM scripting.</description>
		<category>VIEW</category>
		<complexity>UNKNOWN</complexity>
		<targetPlatform>GAE</targetPlatform>
		<targetPlatform>EC2</targetPlatform>
	</MigrationStrategy>

	<!-- ///////////////////////// FRAMEWORK //////////////////////////// -->
	<MigrationStrategy>
		<id>SPRING</id>
		<text>Migrate to Spring</text>
		<description>The Spring Framework is an open source application framework and inversion of control container for the Java platform.</description>
		<category>FRAMEWORK</category>
		<complexity>UNKNOWN</complexity>
		<targetPlatform>GAE</targetPlatform>
		<targetPlatform>EC2</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>STRUTS</id>
		<text>Migrate to Struts</text>
		<description>Apache Struts is an open-source web application framework for developing Java EE web applications.</description>
		<category>FRAMEWORK</category>
		<complexity>UNKNOWN</complexity>
		<targetPlatform>GAE</targetPlatform>
		<targetPlatform>EC2</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>DRUPAL</id>
		<text>Migrate to Drupal</text>
		<description>Drupal is a free and open-source content management framework written in PHP</description>
		<category>FRAMEWORK</category>
		<complexity>UNKNOWN</complexity>
		<targetPlatform>AZURE</targetPlatform>
		<targetPlatform>EC2</targetPlatform>
	</MigrationStrategy>	
	
	<!-- ///////////////////////// DATA //////////////////////////// -->
	<MigrationStrategy>
		<id>MONGO</id>
		<text>Migrate to MongoDB</text>
		<description> </description>
		<category>DATA</category>
		<complexity>UNKNOWN</complexity>
		<targetPlatform>GAE</targetPlatform>
		<targetPlatform>EC2</targetPlatform>
		<targetPlatform>AZURE</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>HADOOP</id>
		<text>Migrate to Apache Hadoop</text>
		<description>Use MadReduce pattern in order to improve the processing of big data, using multiple available parallel-running nodes</description>
		<category>DATA</category>
		<complexity>UNKNOWN</complexity>
		<targetPlatform>GAE</targetPlatform>
		<targetPlatform>EC2</targetPlatform>
		<targetPlatform>AZURE</targetPlatform>
	</MigrationStrategy>
	
	<!-- ##############################################  TARGET PLATFORM INDEPENDENT ######################################### -->
	
	<!-- ///////////////////////// DATA //////////////////////////// -->
	<MigrationStrategy>
		<id>CQRS</id>
		<text>Apply CQRS pattern to data access</text>
		<description>Segregate read from write data operations using CQRS pattern</description>
		<category>DATA</category>
		<complexity>HIGH</complexity>
		<targetPlatform>INDEPENDENT</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>EVENTSOURCE</id>
		<text>Apply Event Sourcing pattern to data access</text>
		<description>The Event Sourcing pattern defines an approach to handling operations on data that is driven by a sequence of events, each of which is recorded in an append-only store</description>
		<category>DATA</category>
		<complexity>HIGH</complexity>
		<targetPlatform>INDEPENDENT</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>INDEXTABLE</id>
		<text>Apply Index table pattern to data access</text>
		<description>If an application needs to quickly retrieve data from a large data store, it may be beneficial to create secondary indexes over fields that are referenced by query criteria</description>
		<category>DATA</category>
		<complexity>AVERAGE</complexity>
		<targetPlatform>INDEPENDENT</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>MATVIEW</id>
		<text>Apply materialize view pattern to data access</text>
		<description>Generate pre-populated views of data in environments where the source data is not in a format that is suitable for querying, where generating a suitable query is difficult, or where query performance is poor due to the nature of the data or the data store</description>
		<category>DATA</category>
		<complexity>AVERAGE</complexity>
		<targetPlatform>INDEPENDENT</targetPlatform>
	</MigrationStrategy>	
	
	<!-- ///////////////////////// NETWORK //////////////////////////// -->
	<MigrationStrategy>
		<id>CIRCUITBREAKER</id>
		<text>Adopt Circuit Braker pattern</text>
		<description>The Circuit Breaker pattern can prevent an application repeatedly trying to execute an operation that is likely to fail, allowing it to continue without waiting for the fault to be rectified or wasting CPU cycles while it determines that the fault is long-lasting</description>
		<category>NETWORK</category>
		<complexity>AVERAGE</complexity>
		<targetPlatform>INDEPENDENT</targetPlatform>
	</MigrationStrategy>
	
	<!-- ///////////////////////// CONFIGURATION //////////////////////////// -->
	<MigrationStrategy>
		<id>EXTCONFSTORE</id>
		<text>Adopt an external configuration store</text>
		<description>Store the configuration information in external storage, and provide an interface that can be used to quickly and efficiently read and update configuration settings</description>
		<category>CONFIGURATION</category>
		<complexity>AVERAGE</complexity>
		<targetPlatform>INDEPENDENT</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>RTRECONF</id>
		<text>Adopt a runtime reconfiguration</text>
		<description>Handle events raised by the hosting infrastructure when it detects a change to the application configuration</description>
		<category>CONFIGURATION</category>
		<complexity>AVERAGE</complexity>
		<targetPlatform>INDEPENDENT</targetPlatform>
	</MigrationStrategy>
	
	<!-- ///////////////////////// QUEUE //////////////////////////// -->
	<MigrationStrategy>
		<id>SAS</id>
		<text>Adopt the Scheduler Agent Supervisor pattern</text>
		<description>Use this pattern when a task that runs in a distributed environment such as the cloud must be resilient to communications failure and/or process failure. It coordinates a set of actions across a distributed set of services and other remote resources</description>
		<category>QUEUE</category>
		<complexity>HIGH</complexity>
		<targetPlatform>INDEPENDENT</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>LEADER</id>
		<text>Adopt the Leader Election pattern</text>
		<description>In a distributed application running a collection of collaborating task instances, it may be necessary for one instance of a task to coordinate the actions being performed by the others</description>
		<category>QUEUE</category>
		<complexity>HIGH</complexity>
		<targetPlatform>INDEPENDENT</targetPlatform>
	</MigrationStrategy>
	
	<MigrationStrategy>
		<id>PIPESFILTERS</id>
		<text>Adopt the Pipes and Filters pattern</text>
		<description>It should be used for applications that require processing easily decomposable into steps, have different scalability needs in every step, require flexibility in terms of adding new steps and removing, or changing the existing ones</description>
		<category>QUEUE</category>
		<complexity>HIGH</complexity>
		<targetPlatform>INDEPENDENT</targetPlatform>
	</MigrationStrategy>
	
</MigrationStrategies>